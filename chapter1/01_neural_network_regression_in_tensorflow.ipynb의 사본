{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/mrdbourke/tensorflow-deep-learning/blob/main/01_neural_network_regression_in_tensorflow.ipynb","timestamp":1684656922222}],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"UPgo18-N1gSi"},"source":["# 01. Neural Network Regression with TensorFlow\n","\n","There are many definitions for a [regression problem](https://en.wikipedia.org/wiki/Regression_analysis) but in our case, we're going to simplify it to be: predicting a number.\n","\n","For example, you might want to:\n","- Predict the selling price of houses given information about them (such as number of rooms, size, number of bathrooms).\n","- Predict the coordinates of a bounding box of an item in an image.\n","- Predict the cost of medical insurance for an individual given their demographics (age, sex, gender, race).\n","\n","In this notebook, we're going to set the foundations for how you can take a sample of inputs (this is your data), build a neural network to discover patterns in those inputs and then make a prediction (in the form of a number) based on those inputs.\n","\n","## What we're going to cover\n","\n","Specifically, we're going to go through doing the following with TensorFlow:\n","- Architecture of a regression model\n","- Input shapes and output shapes\n","  - `X`: features/data (inputs)\n","  - `y`: labels (outputs)\n","- Creating custom data to view and fit\n","- Steps in modelling\n","  - Creating a model\n","  - Compiling a model\n","    - Defining a loss function\n","    - Setting up an optimizer\n","    - Creating evaluation metrics\n","  - Fitting a model (getting it to find patterns in our data)\n","- Evaluating a model\n","  - Visualizng the model (\"visualize, visualize, visualize\")\n","  - Looking at training curves\n","  - Compare predictions to ground truth (using our evaluation metrics)\n","- Saving a model (so we can use it later)\n","- Loading a model\n","\n","Don't worry if none of these make sense now, we're going to go through each.\n","\n","## How you can use this notebook\n","\n","You can read through the descriptions and the code (it should all run), but there's a better option.\n","\n","Write all of the code yourself.\n","\n","Yes. I'm serious. Create a new notebook, and rewrite each line by yourself. Investigate it, see if you can break it, why does it break?\n","\n","You don't have to write the text descriptions but writing the code yourself is a great way to get hands-on experience.\n","\n","Don't worry if you make mistakes, we all do. The way to get better and make less mistakes is to **write more code**."]},{"cell_type":"markdown","metadata":{"id":"etAu7oCZ8r_G"},"source":["## Typical architecture of a regresison neural network\n","\n","The word *typical* is on purpose.\n","\n","Why?\n","\n","Because there are many different ways (actually, there's almost an infinite number of ways) to write neural networks.\n","\n","But the following is a generic setup for ingesting a collection of numbers, finding patterns in them and then outputting some kind of target number.\n","\n","Yes, the previous sentence is vague but we'll see this in action shortly.\n","\n","| **Hyperparameter** | **Typical value** |\n","| --- | --- |\n","| Input layer shape | Same shape as number of features (e.g. 3 for # bedrooms, # bathrooms, # car spaces in housing price prediction) |\n","| Hidden layer(s) | Problem specific, minimum = 1, maximum = unlimited |\n","| Neurons per hidden layer | Problem specific, generally 10 to 100 |\n","| Output layer shape | Same shape as desired prediction shape (e.g. 1 for house price) |\n","| Hidden activation | Usually [ReLU](https://www.kaggle.com/dansbecker/rectified-linear-units-relu-in-deep-learning) (rectified linear unit) |\n","| Output activation | None, ReLU, logistic/tanh |\n","| Loss function | [MSE](https://en.wikipedia.org/wiki/Mean_squared_error) (mean square error) or [MAE](https://en.wikipedia.org/wiki/Mean_absolute_error) (mean absolute error)/Huber (combination of MAE/MSE) if outliers |\n","| Optimizer | [SGD](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/SGD) (stochastic gradient descent), [Adam](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) |\n","\n","*Table 1: Typical architecture of a regression network. Source: Adapted from page 293 of [Hands-On Machine Learning with Scikit-Learn, Keras & TensorFlow Book by AurÃ©lien GÃ©ron](https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/)*\n","\n","Again, if you're new to neural networks and deep learning in general, much of the above table won't make sense. But don't worry, we'll be getting hands-on with all of it soon.\n","\n","> ðŸ”‘ **Note:** A **hyperparameter** in machine learning is something a data analyst or developer can set themselves, where as a **parameter** usually describes something a model learns on its own (a value not explicitly set by an analyst).\n","\n","Okay, enough talk, let's get started writing code.\n","\n","To use TensorFlow, we'll import it as the common alias `tf` (short for TensorFlow)."]},{"cell_type":"code","metadata":{"id":"FMqsqKpk7TrH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b9846e79-901f-4fb3-cc3c-896b60c517f8","executionInfo":{"status":"ok","timestamp":1685355949906,"user_tz":-540,"elapsed":4797,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["import tensorflow as tf\n","print(tf.__version__) # check the version (should be 2.x+)\n","\n","import datetime\n","print(f\"Notebook last run (end-to-end): {datetime.datetime.now()}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.12.0\n","Notebook last run (end-to-end): 2023-05-29 10:25:48.302186\n"]}]},{"cell_type":"markdown","metadata":{"id":"8clMYxrF6Mzv"},"source":["## Creating data to view and fit\n","\n","Since we're working on a **regression problem** (predicting a number) let's create some linear data (a straight line) to model."]},{"cell_type":"code","metadata":{"id":"G43tWFof6i7T","colab":{"base_uri":"https://localhost:8080/","height":435},"outputId":"0129f16d-5658-41db-c5d1-10320b74976b","executionInfo":{"status":"ok","timestamp":1685355949907,"user_tz":-540,"elapsed":7,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Create features\n","X = np.array([-7.0, -4.0, -1.0, 2.0, 5.0, 8.0, 11.0, 14.0])\n","\n","# Create labels\n","y = np.array([3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0])\n","\n","# Visualize it\n","plt.scatter(X, y);"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAicAAAGiCAYAAAA8xWYrAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAd7klEQVR4nO3df2zU93348dfZFDvtzGUmmDs3hhrakrqUbHQ1Q0ujRSHBTPJC20lNVKYwRdmGSLaEdl0zJXW8VaPJpCjqlBFt0hpFLOk2aaWi0yx1ZICi8kMLQ5XFGgXkKESxYQNxBibT1P58/0jxF2Pzw3D43j4/HtJJuc/n47tXdDr5yX3u83Yuy7IsAAASUVPpAQAALiROAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKRMKk42b94cn/vc56KhoSGamppi7dq18eabb4455jd/8zcjl8uNuf3hH/5hWYcGAKrXpOJk165dsXHjxti7d2/86Ec/ivfffz/uvffeOHv27JjjHn744ejv7x+9Pfvss2UdGgCoXrMmc3BPT8+Y+y+99FI0NTXFG2+8EXfeeefo9g9/+MNRKBTKMyEAMKNMKk4uViqVIiKisbFxzPZ/+Id/iK1bt0ahUIjOzs546qmn4sMf/vCEj3Hu3Lk4d+7c6P2RkZE4efJkzJ07N3K53PWMBwBMkSzL4vTp09Hc3Bw1Ndf3ldZclmXZtfzgyMhI/PZv/3acOnUqXn/99dHtf/u3fxsLFy6M5ubm+MlPfhJ/+qd/Gu3t7fEv//IvEz7O008/Hd3d3dc2PQCQlKNHj8att956XY9xzXGyYcOG+Ld/+7d4/fXXLzvEa6+9FnfffXccPnw4Fi9ePG7/xZ+clEqlWLBgQRw9ejTmzJlzLaMBAFNscHAwWlpa4tSpU5HP56/rsa7ptM4jjzwSP/zhD2P37t1XrKMVK1ZERFwyTurq6qKurm7c9jlz5ogTAJhmyvGVjEnFSZZl8eijj8b3v//92LlzZ7S2tl7xZw4ePBgREcVi8ZoGBABmlknFycaNG+OVV16JH/zgB9HQ0BADAwMREZHP5+Omm26KI0eOxCuvvBK/9Vu/FXPnzo2f/OQn8fjjj8edd94Zy5YtuyH/AwBAdZnUd04u9VHNd7/73Vi/fn0cPXo01q1bF729vXH27NloaWmJL3zhC/Hkk09e9SmawcHByOfzUSqVnNYBgGminL+/J31a53JaWlpi165d1zUQADCz+ds6AEBSxAkAkBRxAgAkRZwAAEm5rr+tAwBMH8MjWezvOxnHTw9FU0N9tLc2Rm1Nen/HTpwAwAzQ09sf3dsPRX9paHRbMV8fXZ1t0bE0rYVSndYBgCrX09sfG7YeGBMmEREDpaHYsPVA9PT2V2iyiYkTAKhiwyNZdG8/FBOtVHZ+W/f2QzE8ck1/B/iGECcAUMX2950c94nJhbKI6C8Nxf6+k1M31BWIEwCoYsdPXzpMruW4qSBOAKCKNTXUl/W4qSBOAKCKtbc2RjFfH5e6YDgXH1y1097aOJVjXZY4AYAqVluTi67OtoiIcYFy/n5XZ1tS652IEwCoch1Li7Fl3fIo5Meeuink62PLuuXJrXNiETYAmAE6lhbjnraCFWIBgHTU1uRi5eK5lR7jipzWAQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASMqsSg8AAFNheCSL/X0n4/jpoWhqqI/21saorclVeiwmIE4AqHo9vf3Rvf1Q9JeGRrcV8/XR1dkWHUuLFZyMiTitA0BV6+ntjw1bD4wJk4iIgdJQbNh6IHp6+ys0GZciTgCoWsMjWXRvPxTZBPvOb+vefiiGRyY6gkoRJwBUrf19J8d9YnKhLCL6S0Oxv+/k1A3FFYkTAKrW8dOXDpNrOY6pIU4AqFpNDfVlPY6pIU4AqFrtrY1RzNfHpS4YzsUHV+20tzZO5VhcgTgBoGrV1uSiq7MtImJcoJy/39XZZr2TxIgTAKpax9JibFm3PAr5saduCvn62LJuuXVOEmQRNgCqXsfSYtzTVrBC7DQhTgCYEWprcrFy8dxKj8FVcFoHAEiKOAEAkiJOAICkiBMAICniBABIyqTiZPPmzfG5z30uGhoaoqmpKdauXRtvvvnmmGOGhoZi48aNMXfu3PilX/ql+NKXvhTHjh0r69AAQPWaVJzs2rUrNm7cGHv37o0f/ehH8f7778e9994bZ8+eHT3m8ccfj+3bt8c///M/x65du+K9996LL37xi2UfHACoTrksy7Jr/eH/+Z//iaampti1a1fceeedUSqVYt68efHKK6/E7/zO70RExE9/+tP41Kc+FXv27Ilf//Vfv+JjDg4ORj6fj1KpFHPmzLnW0QCAKVTO39/X9Z2TUqkUERGNjR/8waQ33ngj3n///Vi1atXoMbfddlssWLAg9uzZM+FjnDt3LgYHB8fcAICZ65rjZGRkJB577LH4jd/4jVi6dGlERAwMDMTs2bPj5ptvHnPs/PnzY2BgYMLH2bx5c+Tz+dFbS0vLtY4EAFSBa46TjRs3Rm9vb3zve9+7rgGeeOKJKJVKo7ejR49e1+MBANPbNf1tnUceeSR++MMfxu7du+PWW28d3V4oFOJnP/tZnDp1asynJ8eOHYtCoTDhY9XV1UVdXd21jAEAVKFJfXKSZVk88sgj8f3vfz9ee+21aG1tHbP/s5/9bHzoQx+KHTt2jG57880345133omVK1eWZ2IAoKpN6pOTjRs3xiuvvBI/+MEPoqGhYfR7JPl8Pm666abI5/Px0EMPxaZNm6KxsTHmzJkTjz76aKxcufKqrtQBAJjUpcS5XG7C7d/97ndj/fr1EfHBImxf/epX49VXX41z587F6tWr42/+5m8ueVrnYi4lBoDpp5y/v69rnZMbQZwAwPSTzDonAADlJk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIyqxKDwDA1BgeyWJ/38k4fnoomhrqo721MWprcpUeC8YRJwAzQE9vf3RvPxT9paHRbcV8fXR1tkXH0mIFJ4PxnNYBqHI9vf2xYeuBMWESETFQGooNWw9ET29/hSaDiYkTgCo2PJJF9/ZDkU2w7/y27u2HYnhkoiOgMsQJQBXb33dy3CcmF8oior80FPv7Tk7dUHAF4gSgih0/fekwuZbjYCqIE4Aq1tRQX9bjYCqIE4Aq1t7aGMV8fVzqguFcfHDVTntr41SOBZclTgCqWG1NLro62yIixgXK+ftdnW3WOyEp4gSgynUsLcaWdcujkB976qaQr48t65Zb54TkWIQNYAboWFqMe9oKVohlWhAnADNEbU0uVi6eW+kx4Iqc1gEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEjKrEoPADBVhkey2N93Mo6fHoqmhvpob22M2ppcpccCLjLpT052794dnZ2d0dzcHLlcLrZt2zZm//r16yOXy425dXR0lGtegGvS09sfdzzzWjzwd3vjj793MB74u71xxzOvRU9vf6VHAy4y6Tg5e/Zs3H777fHCCy9c8piOjo7o7+8fvb366qvXNSTA9ejp7Y8NWw9Ef2lozPaB0lBs2HpAoEBiJn1aZ82aNbFmzZrLHlNXVxeFQuGahwIol+GRLLq3H4psgn1ZROQionv7obinreAUDyTihnwhdufOndHU1BRLliyJDRs2xIkTJy557Llz52JwcHDMDaBc9vedHPeJyYWyiOgvDcX+vpNTNxRwWWWPk46Ojnj55Zdjx44d8cwzz8SuXbtizZo1MTw8POHxmzdvjnw+P3praWkp90jADHb89KXD5FqOA268sl+tc//994/+92c+85lYtmxZLF68OHbu3Bl33333uOOfeOKJ2LRp0+j9wcFBgQKUTVNDfVmPA268G77OyaJFi+KWW26Jw4cPT7i/rq4u5syZM+YGUC7trY1RzNfHpb5NkouIYv6Dy4qBNNzwOHn33XfjxIkTUSwWb/RTAYxTW5OLrs62iIhxgXL+fldnmy/DQkImHSdnzpyJgwcPxsGDByMioq+vLw4ePBjvvPNOnDlzJv7kT/4k9u7dG2+//Xbs2LEj7rvvvvj4xz8eq1evLvfsAFelY2kxtqxbHoX82FM3hXx9bFm3PDqW+scTpCSXZdlEV9hd0s6dO+Ouu+4at/3BBx+MLVu2xNq1a+O//uu/4tSpU9Hc3Bz33ntv/MVf/EXMnz//qh5/cHAw8vl8lEolp3iAsrJCLNw45fz9Pek4udHECQBMP+X8/e0P/wEASREnAEBSxAkAkBRxAgAkRZwAAEkRJwBAUsQJAJAUcQIAJEWcAABJEScAQFLECQCQFHECACRFnAAASREnAEBSxAkAkBRxAgAkRZwAAEkRJwBAUsQJAJAUcQIAJEWcAABJEScAQFLECQCQFHECACRFnAAASREnAEBSxAkAkBRxAgAkRZwAAEkRJwBAUsQJAJAUcQIAJEWcAABJEScAQFLECQCQFHECACRlVqUHAKbG8EgW+/tOxvHTQ9HUUB/trY1RW5Or9FgA44gTmAF6evuje/uh6C8NjW4r5uujq7MtOpYWKzgZwHhO60CV6+ntjw1bD4wJk4iIgdJQbNh6IHp6+ys0GcDExAlUseGRLLq3H4psgn3nt3VvPxTDIxMdAVAZ4gSq2P6+k+M+MblQFhH9paHY33dy6oYCuAJxAlXs+OlLh8m1HAcwFcQJVLGmhvqyHgcwFcQJVLH21sYo5uvjUhcM5+KDq3baWxunciyAyxInUMVqa3LR1dkWETEuUM7f7+pss94JkBRxAlWuY2kxtqxbHoX82FM3hXx9bFm33DonQHIswgYzQMfSYtzTVrBCLDAtiBOYIWprcrFy8dxKjwFwRU7rAABJEScAQFLECQCQFHECACRFnAAASREnAEBSxAkAkBRxAgAkRZwAAEkRJwBAUsQJAJAUcQIAJEWcAABJEScAQFLECQCQFHECACRFnAAASREnAEBSxAkAkBRxAgAkRZwAAEmZdJzs3r07Ojs7o7m5OXK5XGzbtm3M/izL4pvf/GYUi8W46aabYtWqVfHWW2+Va14AoMpNOk7Onj0bt99+e7zwwgsT7n/22WfjO9/5Trz44ouxb9+++MhHPhKrV6+OoaGh6x4WAKh+syb7A2vWrIk1a9ZMuC/Lsnj++efjySefjPvuuy8iIl5++eWYP39+bNu2Le6///7rmxYAqHpl/c5JX19fDAwMxKpVq0a35fP5WLFiRezZs2fCnzl37lwMDg6OuQEAM1dZ42RgYCAiIubPnz9m+/z580f3XWzz5s2Rz+dHby0tLeUcCQCYZip+tc4TTzwRpVJp9Hb06NFKjwQAVFBZ46RQKERExLFjx8ZsP3bs2Oi+i9XV1cWcOXPG3ACAmauscdLa2hqFQiF27Ngxum1wcDD27dsXK1euLOdTAQBVatJX65w5cyYOHz48er+vry8OHjwYjY2NsWDBgnjsscfiW9/6VnziE5+I1tbWeOqpp6K5uTnWrl1bzrkBgCo16Tj5z//8z7jrrrtG72/atCkiIh588MF46aWX4utf/3qcPXs2fv/3fz9OnToVd9xxR/T09ER9fX35pgYAqlYuy7Ks0kNcaHBwMPL5fJRKJd8/AYBpopy/vyt+tQ4AwIXECQCQFHECACRFnAAASZn01TowXQ2PZLG/72QcPz0UTQ310d7aGLU1uUqPBcBFxAkzQk9vf3RvPxT9paHRbcV8fXR1tkXH0mIFJwPgYk7rUPV6evtjw9YDY8IkImKgNBQbth6Int7+Ck0GwETECVVteCSL7u2HYqLFfM5v695+KIZHklruB2BGEydUtf19J8d9YnKhLCL6S0Oxv+/k1A0FwGWJE6ra8dOXDpNrOQ6AG0+cUNWaGq7ubzpd7XEA3HjihKrW3toYxXx9XOqC4Vx8cNVOe2vjVI4FwGWIE6pabU0uujrbIiLGBcr5+12dbdY7AUiIOKHqdSwtxpZ1y6OQH3vqppCvjy3rllvnBCAxFmFjRuhYWox72gpWiAWYBsQJM0ZtTS5WLp5b6TEAuAKndQCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIyq9IDMDWGR7LY33cyjp8eiqaG+mhvbYzamlylxwKAccTJDNDT2x/d2w9Ff2lodFsxXx9dnW3RsbRYwckAYDyndapcT29/bNh6YEyYREQMlIZiw9YD0dPbX6HJAGBi4qSKDY9k0b39UGQT7Du/rXv7oRgemegIAKgMcVLF9vedHPeJyYWyiOgvDcX+vpNTNxQAXIE4qWLHT186TK7lOACYCuKkijU11Jf1OACYCuKkirW3NkYxXx+XumA4Fx9ctdPe2jiVYwHAZYmTKlZbk4uuzraIiHGBcv5+V2eb9U4ASIo4qXIdS4uxZd3yKOTHnrop5Otjy7rl1jkBIDkWYZsBOpYW4562ghViAZgWxMkMUVuTi5WL51Z6DAC4Iqd1AICkiBMAICniBABIijgBAJIiTgCApJQ9Tp5++unI5XJjbrfddlu5nwYAqFI35FLiT3/60/Hv//7v//9JZrliGQC4OjekGmbNmhWFQuFGPDQAUOVuyHdO3nrrrWhubo5FixbFV77ylXjnnXcueey5c+dicHBwzA0AmLnKHicrVqyIl156KXp6emLLli3R19cXn//85+P06dMTHr958+bI5/Ojt5aWlnKPBABMI7ksy7Ib+QSnTp2KhQsXxnPPPRcPPfTQuP3nzp2Lc+fOjd4fHByMlpaWKJVKMWfOnBs5GgBQJoODg5HP58vy+/uGf1P15ptvjk9+8pNx+PDhCffX1dVFXV3djR4DAJgmbvg6J2fOnIkjR45EsVi80U8FAFSBssfJ1772tdi1a1e8/fbb8eMf/zi+8IUvRG1tbTzwwAPlfioAoAqV/bTOu+++Gw888ECcOHEi5s2bF3fccUfs3bs35s2bV+6nAgCqUNnj5Hvf+165HxIAmEH8bR0AICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKSIEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKTMqvQAU2V4JIv9fSfj+OmhaGqoj/bWxqityVV6LADgIjMiTnp6+6N7+6HoLw2Nbivm66Orsy06lhYrOBkAcLGqP63T09sfG7YeGBMmEREDpaHYsPVA9PT2V2gyAGAiVR0nwyNZdG8/FNkE+85v695+KIZHJjoCAKiEqo6T/X0nx31icqEsIvpLQ7G/7+TUDQUAXFZVx8nx05cOk2s5DgC48ao6Tpoa6st6HABw41V1nLS3NkYxXx+XumA4Fx9ctdPe2jiVYwEAl1HVcVJbk4uuzraIiHGBcv5+V2eb9U4AICFVHScRER1Li7Fl3fIo5Meeuink62PLuuXWOQGAxMyIRdg6lhbjnraCFWIBYBqYEXES8cEpnpWL51Z6DADgCqr+tA4AML2IEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApCS3QmyWZRERMTg4WOFJAICrdf739vnf49cjuTg5ffp0RES0tLRUeBIAYLJOnz4d+Xz+uh4jl5UjccpoZGQk3nvvvWhoaIhcbub+Yb7BwcFoaWmJo0ePxpw5cyo9DpfhtZpevF7Th9dq+jj/Wh06dCiWLFkSNTXX962R5D45qampiVtvvbXSYyRjzpw53pTThNdqevF6TR9eq+njox/96HWHSYQvxAIAiREnAEBSxEmi6urqoqurK+rq6io9ClfgtZpevF7Th9dq+ij3a5XcF2IBgJnNJycAQFLECQCQFHECACRFnAAASREn08DHPvaxyOVyY27f/va3Kz0Wv/DCCy/Exz72saivr48VK1bE/v37Kz0SF3n66afHvYduu+22So/FL+zevTs6Ozujubk5crlcbNu2bcz+LMvim9/8ZhSLxbjpppti1apV8dZbb1Vm2BnuSq/V+vXrx73XOjo6Jv084mSa+PM///Po7+8fvT366KOVHomI+Md//MfYtGlTdHV1xYEDB+L222+P1atXx/Hjxys9Ghf59Kc/PeY99Prrr1d6JH7h7Nmzcfvtt8cLL7ww4f5nn302vvOd78SLL74Y+/bti4985COxevXqGBoamuJJudJrFRHR0dEx5r326quvTvp5klu+nok1NDREoVCo9Bhc5LnnnouHH344fu/3fi8iIl588cX413/91/j7v//7+MY3vlHh6bjQrFmzvIcStWbNmlizZs2E+7Isi+effz6efPLJuO+++yIi4uWXX4758+fHtm3b4v7775/KUWe8y71W59XV1V33e80nJ9PEt7/97Zg7d2786q/+avzVX/1V/PznP6/0SDPez372s3jjjTdi1apVo9tqampi1apVsWfPngpOxkTeeuutaG5ujkWLFsVXvvKVeOeddyo9Elehr68vBgYGxrzP8vl8rFixwvssUTt37oympqZYsmRJbNiwIU6cODHpx/DJyTTwR3/0R7F8+fJobGyMH//4x/HEE09Ef39/PPfcc5UebUb73//93xgeHo758+eP2T5//vz46U9/WqGpmMiKFSvipZdeiiVLlkR/f390d3fH5z//+ejt7Y2GhoZKj8dlDAwMRERM+D47v490dHR0xBe/+MVobW2NI0eOxJ/92Z/FmjVrYs+ePVFbW3vVjyNOKuQb3/hGPPPMM5c95r//+7/jtttui02bNo1uW7ZsWcyePTv+4A/+IDZv3mxZZ7gKF34MvWzZslixYkUsXLgw/umf/ikeeuihCk4G1eXC02yf+cxnYtmyZbF48eLYuXNn3H333Vf9OOKkQr761a/G+vXrL3vMokWLJty+YsWK+PnPfx5vv/12LFmy5AZMx9W45ZZbora2No4dOzZm+7Fjx3y3IXE333xzfPKTn4zDhw9XehSu4Px76dixY1EsFke3Hzt2LH7lV36lQlNxtRYtWhS33HJLHD58WJxMB/PmzYt58+Zd088ePHgwampqoqmpqcxTMRmzZ8+Oz372s7Fjx45Yu3ZtRESMjIzEjh074pFHHqnscFzWmTNn4siRI/G7v/u7lR6FK2htbY1CoRA7duwYjZHBwcHYt29fbNiwobLDcUXvvvtunDhxYkxYXg1xkrg9e/bEvn374q677oqGhobYs2dPPP7447Fu3br45V/+5UqPN+Nt2rQpHnzwwfi1X/u1aG9vj+effz7Onj07evUOafja174WnZ2dsXDhwnjvvfeiq6sramtr44EHHqj0aMQHsXjhp1h9fX1x8ODBaGxsjAULFsRjjz0W3/rWt+ITn/hEtLa2xlNPPRXNzc2j/yhg6lzutWpsbIzu7u740pe+FIVCIY4cORJf//rX4+Mf/3isXr16ck+UkbQ33ngjW7FiRZbP57P6+vrsU5/6VPaXf/mX2dDQUKVH4xf++q//OluwYEE2e/bsrL29Pdu7d2+lR+IiX/7yl7NisZjNnj07++hHP5p9+ctfzg4fPlzpsfiF//iP/8giYtztwQcfzLIsy0ZGRrKnnnoqmz9/flZXV5fdfffd2ZtvvlnZoWeoy71W//d//5fde++92bx587IPfehD2cKFC7OHH344GxgYmPTz5LIsy8qSUwAAZWCdEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKT8P0zcr4hLXzkpAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"9ONZF8un7_xy"},"source":["Before we do any modelling, can you calculate the pattern between `X` and `y`?\n","\n","For example, say I asked you, based on this data what the `y` value would be if `X` was 17.0?\n","\n","Or how about if `X` was -10.0?\n","\n","This kind of pattern discovery is the essence of what we'll be building neural networks to do for us."]},{"cell_type":"markdown","metadata":{"id":"zNCXxHnF6jjZ"},"source":["## Regression input shapes and output shapes\n","\n","One of the most important concepts when working with neural networks are the input and output shapes.\n","\n","The **input shape** is the shape of your data that goes into the model.\n","\n","The **output shape** is the shape of your data you want to come out of your model.\n","\n","These will differ depending on the problem you're working on.\n","\n","Neural networks accept numbers and output numbers. These numbers are typically represented as tensors (or arrays).\n","\n","Before, we created data using NumPy arrays, but we could do the same with tensors."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrXQ3m0prWXa","outputId":"e42d9f2b-d33a-40b4-a2ce-4706f6a1c63d","executionInfo":{"status":"ok","timestamp":1685355952574,"user_tz":-540,"elapsed":2672,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Example input and output shapes of a regression model\n","house_info = tf.constant([\"bedroom\", \"bathroom\", \"garage\"])\n","house_price = tf.constant([939700])\n","house_info, house_price"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(3,), dtype=string, numpy=array([b'bedroom', b'bathroom', b'garage'], dtype=object)>,\n"," <tf.Tensor: shape=(1,), dtype=int32, numpy=array([939700], dtype=int32)>)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yi3VWKH6sRrZ","outputId":"27299260-310c-4ab9-8b6e-f7c808857866","executionInfo":{"status":"ok","timestamp":1685355952575,"user_tz":-540,"elapsed":15,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["house_info.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([3])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"kOxyr9sR6m9X","colab":{"base_uri":"https://localhost:8080/","height":435},"outputId":"9ab4abb0-c339-43db-d549-66443ce4abcf","executionInfo":{"status":"ok","timestamp":1685355952575,"user_tz":-540,"elapsed":11,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Create features (using tensors)\n","X = tf.constant([-7.0, -4.0, -1.0, 2.0, 5.0, 8.0, 11.0, 14.0])\n","\n","# Create labels (using tensors)\n","y = tf.constant([3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0])\n","\n","# Visualize it\n","plt.scatter(X, y);"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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TR9eq+njox/96HWHSYQvxAIAiREnAEBSxEmi6urqoqurK+rq6io9ClfgtZpevF7Th9dq+ij3a5XcF2IBgJnNJycAQFLECQCQFHECACRFnAAASREn08DHPvaxyOVyY27f/va3Kz0Wv/DCCy/Exz72saivr48VK1bE/v37Kz0SF3n66afHvYduu+22So/FL+zevTs6Ozujubk5crlcbNu2bcz+LMvim9/8ZhSLxbjpppti1apV8dZbb1Vm2BnuSq/V+vXrx73XOjo6Jv084mSa+PM///Po7+8fvT366KOVHomI+Md//MfYtGlTdHV1xYEDB+L222+P1atXx/Hjxys9Ghf59Kc/PeY99Prrr1d6JH7h7Nmzcfvtt8cLL7ww4f5nn302vvOd78SLL74Y+/bti4985COxevXqGBoamuJJudJrFRHR0dEx5r326quvTvp5klu+nok1NDREoVCo9Bhc5LnnnouHH344fu/3fi8iIl588cX413/91/j7v//7+MY3vlHh6bjQrFmzvIcStWbNmlizZs2E+7Isi+effz6efPLJuO+++yIi4uWXX4758+fHtm3b4v7775/KUWe8y71W59XV1V33e80nJ9PEt7/97Zg7d2786q/+avzVX/1V/PznP6/0SDPez372s3jjjTdi1apVo9tqampi1apVsWfPngpOxkTeeuutaG5ujkWLFsVXvvKVeOeddyo9Elehr68vBgYGxrzP8vl8rFixwvssUTt37oympqZYsmRJbNiwIU6cODHpx/DJyTTwR3/0R7F8+fJobGyMH//4x/HEE09Ef39/PPfcc5UebUb73//93xgeHo758+eP2T5//vz46U9/WqGpmMiKFSvipZdeiiVLlkR/f390d3fH5z//+ejt7Y2GhoZKj8dlDAwMRERM+D47v490dHR0xBe/+MVobW2NI0eOxJ/92Z/FmjVrYs+ePVFbW3vVjyNOKuQb3/hGPPPMM5c95r//+7/jtttui02bNo1uW7ZsWcyePTv+4A/+IDZv3mxZZ7gKF34MvWzZslixYkUsXLgw/umf/ikeeuihCk4G1eXC02yf+cxnYtmyZbF48eLYuXNn3H333Vf9OOKkQr761a/G+vXrL3vMokWLJty+YsWK+PnPfx5vv/12LFmy5AZMx9W45ZZbora2No4dOzZm+7Fjx3y3IXE333xzfPKTn4zDhw9XehSu4Px76dixY1EsFke3Hzt2LH7lV36lQlNxtRYtWhS33HJLHD58WJxMB/PmzYt58+Zd088ePHgwampqoqmpqcxTMRmzZ8+Oz372s7Fjx45Yu3ZtRESMjIzEjh074pFHHqnscFzWmTNn4siRI/G7v/u7lR6FK2htbY1CoRA7duwYjZHBwcHYt29fbNiwobLDcUXvvvtunDhxYkxYXg1xkrg9e/bEvn374q677oqGhobYs2dPPP7447Fu3br45V/+5UqPN+Nt2rQpHnzwwfi1X/u1aG9vj+effz7Onj07evUOafja174WnZ2dsXDhwnjvvfeiq6sramtr44EHHqj0aMQHsXjhp1h9fX1x8ODBaGxsjAULFsRjjz0W3/rWt+ITn/hEtLa2xlNPPRXNzc2j/yhg6lzutWpsbIzu7u740pe+FIVCIY4cORJf//rX4+Mf/3isXr16ck+UkbQ33ngjW7FiRZbP57P6+vrsU5/6VPaXf/mX2dDQUKVH4xf++q//OluwYEE2e/bsrL29Pdu7d2+lR+IiX/7yl7NisZjNnj07++hHP5p9+ctfzg4fPlzpsfiF//iP/8giYtztwQcfzLIsy0ZGRrKnnnoqmz9/flZXV5fdfffd2ZtvvlnZoWeoy71W//d//5fde++92bx587IPfehD2cKFC7OHH344GxgYmPTz5LIsy8qSUwAAZWCdEwAgKeIEAEiKOAEAkiJOAICkiBMAICniBABIijgBAJIiTgCApIgTACAp4gQASIo4AQCSIk4AgKT8P0zcr4hLXzkpAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"zaPxco6E9i1_"},"source":["Our goal here will be to use `X` to predict `y`.\n","\n","So our **input** will be `X` and our **output** will be `y`.\n","\n","Knowing this, what do you think our input and output shapes will be?\n","\n","Let's take a look."]},{"cell_type":"code","metadata":{"id":"j1oT1gmB9iX-","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5e8be3a6-b588-453b-e90e-f208432536ff","executionInfo":{"status":"ok","timestamp":1685355952576,"user_tz":-540,"elapsed":11,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Take a single example of X\n","input_shape = X[0].shape \n","\n","# Take a single example of y\n","output_shape = y[0].shape\n","\n","input_shape, output_shape # these are both scalars (no shape)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([]), TensorShape([]))"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"m4txxFTL_EEX"},"source":["Huh?\n","\n","From this it seems our inputs and outputs have no shape?\n","\n","How could that be?\n","\n","It's because no matter what kind of data we pass to our model, it's always going to take as input and return as output some kind of tensor.\n","\n","But in our case because of our dataset (only 2 small lists of numbers), we're looking at a special kind of tensor, more specifically a rank 0 tensor or a scalar."]},{"cell_type":"code","metadata":{"id":"Dag5y4MPaTmc","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f80ff3fa-6392-492e-9d22-527ddfb253eb","executionInfo":{"status":"ok","timestamp":1685355952576,"user_tz":-540,"elapsed":9,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Let's take a look at the single examples invidually\n","X[0], y[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(), dtype=float32, numpy=-7.0>,\n"," <tf.Tensor: shape=(), dtype=float32, numpy=3.0>)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"fKtihU57_cOY"},"source":["In our case, we're trying to build a model to predict the pattern between `X[0]` equalling `-7.0` and `y[0]` equalling `3.0`.\n","\n","So now we get our answer, we're trying to use 1 `X` value to predict 1 `y` value.\n","\n","You might be thinking, \"this seems pretty complicated for just predicting a straight line...\".\n","\n","And you'd be right.\n","\n","But the concepts we're covering here, the concepts of input and output shapes to a model are fundamental. \n","\n","In fact, they're probably two of the things you'll spend the most time on when you work with neural networks: **making sure your input and outputs are in the correct shape**.\n","\n","If it doesn't make sense now, we'll see plenty more examples later on (soon you'll notice the input and output shapes can be almost anything you can imagine).\n","\n","![example of input and output shapes for a housing price prediction problem](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/01-input-and-output-shapes-housing-prices.png)\n","*If you were working on building a machine learning algorithm for predicting housing prices, your inputs may be number of bedrooms, number of bathrooms and number of garages, giving you an input shape of 3 (3 different features). And since you're trying to predict the price of the house, your output shape would be 1.*"]},{"cell_type":"markdown","metadata":{"id":"PhAIqjrn6olF"},"source":["## Steps in modelling with TensorFlow\n","\n","Now we know what data we have as well as the input and output shapes, let's see how we'd build a neural network to model it.\n","\n","In TensorFlow, there are typically 3 fundamental steps to creating and training a model.\n","\n","1. **Creating a model** - piece together the layers of a neural network yourself (using the [Functional](https://www.tensorflow.org/guide/keras/functional) or [Sequential API](https://www.tensorflow.org/api_docs/python/tf/keras/Sequential)) or import a previously built model (known as transfer learning).\n","2. **Compiling a model** - defining how a models performance should be measured (loss/metrics) as well as defining how it should improve (optimizer). \n","3. **Fitting a model** - letting the model try to find patterns in the data (how does `X` get to `y`). \n","\n","Let's see these in action using the [Keras Sequential API](https://www.tensorflow.org/api_docs/python/tf/keras/Sequential) to build a model for our regression data. And then we'll step through each.\n","\n","> **Note:** If you're using [TensorFlow 2.7.0](https://github.com/tensorflow/tensorflow/releases/tag/v2.7.0)+, the `fit()` function no longer upscales input data to go from `(batch_size, )` to `(batch_size, 1)`. To fix this, you'll need to expand the dimension of input data using `tf.expand_dims(input_data, axis=-1)`.\n",">\n","> In our case, this means instead of using `model.fit(X, y, epochs=5)`, use `model.fit(tf.expand_dims(X, axis=-1), y, epochs=5)`. "]},{"cell_type":"code","metadata":{"id":"P9jj-OE16yCn","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e2f533a7-cd03-41d2-da4f-f131378e03c9","executionInfo":{"status":"ok","timestamp":1685355958522,"user_tz":-540,"elapsed":5953,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a model using the Sequential API\n","model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","model.compile(loss=tf.keras.losses.mae, # mae is short for mean absolute error\n","              optimizer=tf.keras.optimizers.SGD(), # SGD is short for stochastic gradient descent\n","              metrics=[\"mae\"])\n","\n","# Fit the model\n","# model.fit(X, y, epochs=5) # this will break with TensorFlow 2.7.0+\n","model.fit(tf.expand_dims(X, axis=-1), y, epochs=5)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","1/1 [==============================] - 5s 5s/step - loss: 14.2275 - mae: 14.2275\n","Epoch 2/5\n","1/1 [==============================] - 0s 11ms/step - loss: 14.0950 - mae: 14.0950\n","Epoch 3/5\n","1/1 [==============================] - 0s 11ms/step - loss: 13.9625 - mae: 13.9625\n","Epoch 4/5\n","1/1 [==============================] - 0s 12ms/step - loss: 13.8300 - mae: 13.8300\n","Epoch 5/5\n","1/1 [==============================] - 0s 13ms/step - loss: 13.6975 - mae: 13.6975\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ff9f9ceb8e0>"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"bbjCwkEtetB9"},"source":["Boom!\n","\n","We've just trained a model to figure out the patterns between `X` and `y`.\n","\n","How do you think it went?"]},{"cell_type":"code","metadata":{"id":"VWLpG2U3erWo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8a2af378-ac2f-4c47-b390-50fdc4a0411e","executionInfo":{"status":"ok","timestamp":1685355958522,"user_tz":-540,"elapsed":35,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Check out X and y\n","X, y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(8,), dtype=float32, numpy=array([-7., -4., -1.,  2.,  5.,  8., 11., 14.], dtype=float32)>,\n"," <tf.Tensor: shape=(8,), dtype=float32, numpy=array([ 3.,  6.,  9., 12., 15., 18., 21., 24.], dtype=float32)>)"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"0ZpkaI_Oe6no"},"source":["What do you think the outcome should be if we passed our model an `X` value of 17.0?"]},{"cell_type":"code","metadata":{"id":"X86cD66Qeo-8","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a0ca9a2d-fd9d-4dc5-b4bd-ec150e85e22c","executionInfo":{"status":"ok","timestamp":1685355958522,"user_tz":-540,"elapsed":20,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make a prediction with the model\n","model.predict([17.0])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 104ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[-0.50872344]], dtype=float32)"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"2YoKIqhffq33"},"source":["It doesn't go very well... it should've output something close to 27.0.\n","\n","> ðŸ¤” **Question:** What's Keras? I thought we were working with TensorFlow but every time we write TensorFlow code, `keras` comes after `tf` (e.g. `tf.keras.layers.Dense()`)?\n","\n","Before TensorFlow 2.0+, [Keras](https://keras.io/) was an API designed to be able to build deep learning models with ease. Since TensorFlow 2.0+, its functionality has been tightly integrated within the TensorFlow library."]},{"cell_type":"markdown","metadata":{"id":"qAPk1T3xgOm4"},"source":["## Improving a model\n","\n","How do you think you'd improve upon our current model?\n","\n","If you guessed by tweaking some of the things we did above, you'd be correct.\n","\n","To improve our model, we alter almost every part of the 3 steps we went through before.\n","\n","1. **Creating a model** - here you might want to add more layers, increase the number of hidden units (also called neurons) within each layer, change the activation functions of each layer.\n","2. **Compiling a model** - you might want to choose optimization function or perhaps change the **learning rate** of the optimization function.\n","3. **Fitting a model** - perhaps you could fit a model for more **epochs** (leave it training for longer) or on more data (give the model more examples to learn from).\n","\n","![various options you can use to improve a neural network model](https://raw.githubusercontent.com/mrdbourke/tensorflow-deep-learning/main/images/02-improving-a-model-from-model-perspective.png)\n","*There are many different ways to potentially improve a neural network. Some of the most common include: increasing the number of layers (making the network deeper), increasing the number of hidden units (making the network wider) and changing the learning rate. Because these values are all human-changeable, they're referred to as [hyperparameters](https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning)) and the practice of trying to find the best hyperparameters is referred to as [hyperparameter tuning](https://en.wikipedia.org/wiki/Hyperparameter_optimization).*\n","\n","Woah. We just introduced a bunch of possible steps. The important thing to remember is how you alter each of these will depend on the problem you're working on.\n","\n","And the good thing is, over the next few problems, we'll get hands-on with all of them.\n","\n","For now, let's keep it simple, all we'll do is train our model for longer (everything else will stay the same)."]},{"cell_type":"code","metadata":{"id":"MI0LammMgWcN","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b081f163-95dc-4550-cf84-54faa31a59a6","executionInfo":{"status":"ok","timestamp":1685355962548,"user_tz":-540,"elapsed":4042,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a model (same as above)\n","model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile model (same as above)\n","model.compile(loss=tf.keras.losses.mae,\n","              optimizer=tf.keras.optimizers.SGD(),\n","              metrics=[\"mae\"])\n","\n","# Fit model (this time we'll train for longer)\n","model.fit(tf.expand_dims(X, axis=-1), y, epochs=100) # train for 100 epochs not 10"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","1/1 [==============================] - 0s 469ms/step - loss: 20.0953 - mae: 20.0953\n","Epoch 2/100\n","1/1 [==============================] - 0s 17ms/step - loss: 19.8140 - mae: 19.8140\n","Epoch 3/100\n","1/1 [==============================] - 0s 10ms/step - loss: 19.5328 - mae: 19.5328\n","Epoch 4/100\n","1/1 [==============================] - 0s 12ms/step - loss: 19.2515 - mae: 19.2515\n","Epoch 5/100\n","1/1 [==============================] - 0s 9ms/step - loss: 18.9703 - mae: 18.9703\n","Epoch 6/100\n","1/1 [==============================] - 0s 12ms/step - loss: 18.6890 - mae: 18.6890\n","Epoch 7/100\n","1/1 [==============================] - 0s 10ms/step - loss: 18.4078 - mae: 18.4078\n","Epoch 8/100\n","1/1 [==============================] - 0s 10ms/step - loss: 18.1265 - mae: 18.1265\n","Epoch 9/100\n","1/1 [==============================] - 0s 11ms/step - loss: 17.8453 - mae: 17.8453\n","Epoch 10/100\n","1/1 [==============================] - 0s 12ms/step - loss: 17.5640 - mae: 17.5640\n","Epoch 11/100\n","1/1 [==============================] - 0s 10ms/step - loss: 17.2828 - mae: 17.2828\n","Epoch 12/100\n","1/1 [==============================] - 0s 16ms/step - loss: 17.0015 - mae: 17.0015\n","Epoch 13/100\n","1/1 [==============================] - 0s 16ms/step - loss: 16.7203 - mae: 16.7203\n","Epoch 14/100\n","1/1 [==============================] - 0s 10ms/step - loss: 16.4390 - mae: 16.4390\n","Epoch 15/100\n","1/1 [==============================] - 0s 8ms/step - loss: 16.1578 - mae: 16.1578\n","Epoch 16/100\n","1/1 [==============================] - 0s 9ms/step - loss: 15.8765 - mae: 15.8765\n","Epoch 17/100\n","1/1 [==============================] - 0s 9ms/step - loss: 15.5953 - mae: 15.5953\n","Epoch 18/100\n","1/1 [==============================] - 0s 9ms/step - loss: 15.3140 - mae: 15.3140\n","Epoch 19/100\n","1/1 [==============================] - 0s 8ms/step - loss: 15.0328 - mae: 15.0328\n","Epoch 20/100\n","1/1 [==============================] - 0s 9ms/step - loss: 14.7631 - mae: 14.7631\n","Epoch 21/100\n","1/1 [==============================] - 0s 11ms/step - loss: 14.6306 - mae: 14.6306\n","Epoch 22/100\n","1/1 [==============================] - 0s 13ms/step - loss: 14.4981 - mae: 14.4981\n","Epoch 23/100\n","1/1 [==============================] - 0s 9ms/step - loss: 14.3656 - mae: 14.3656\n","Epoch 24/100\n","1/1 [==============================] - 0s 9ms/step - loss: 14.2331 - mae: 14.2331\n","Epoch 25/100\n","1/1 [==============================] - 0s 9ms/step - loss: 14.1006 - mae: 14.1006\n","Epoch 26/100\n","1/1 [==============================] - 0s 10ms/step - loss: 13.9681 - mae: 13.9681\n","Epoch 27/100\n","1/1 [==============================] - 0s 9ms/step - loss: 13.8356 - mae: 13.8356\n","Epoch 28/100\n","1/1 [==============================] - 0s 10ms/step - loss: 13.7031 - mae: 13.7031\n","Epoch 29/100\n","1/1 [==============================] - 0s 11ms/step - loss: 13.5706 - mae: 13.5706\n","Epoch 30/100\n","1/1 [==============================] - 0s 10ms/step - loss: 13.4381 - mae: 13.4381\n","Epoch 31/100\n","1/1 [==============================] - 0s 16ms/step - loss: 13.3056 - mae: 13.3056\n","Epoch 32/100\n","1/1 [==============================] - 0s 10ms/step - loss: 13.1731 - mae: 13.1731\n","Epoch 33/100\n","1/1 [==============================] - 0s 9ms/step - loss: 13.0406 - mae: 13.0406\n","Epoch 34/100\n","1/1 [==============================] - 0s 10ms/step - loss: 12.9081 - mae: 12.9081\n","Epoch 35/100\n","1/1 [==============================] - 0s 9ms/step - loss: 12.7756 - mae: 12.7756\n","Epoch 36/100\n","1/1 [==============================] - 0s 12ms/step - loss: 12.6431 - mae: 12.6431\n","Epoch 37/100\n","1/1 [==============================] - 0s 10ms/step - loss: 12.5106 - mae: 12.5106\n","Epoch 38/100\n","1/1 [==============================] - 0s 9ms/step - loss: 12.3781 - mae: 12.3781\n","Epoch 39/100\n","1/1 [==============================] - 0s 9ms/step - loss: 12.2456 - mae: 12.2456\n","Epoch 40/100\n","1/1 [==============================] - 0s 9ms/step - loss: 12.1131 - mae: 12.1131\n","Epoch 41/100\n","1/1 [==============================] - 0s 10ms/step - loss: 11.9806 - mae: 11.9806\n","Epoch 42/100\n","1/1 [==============================] - 0s 10ms/step - loss: 11.8481 - mae: 11.8481\n","Epoch 43/100\n","1/1 [==============================] - 0s 17ms/step - loss: 11.7156 - mae: 11.7156\n","Epoch 44/100\n","1/1 [==============================] - 0s 15ms/step - loss: 11.5831 - mae: 11.5831\n","Epoch 45/100\n","1/1 [==============================] - 0s 9ms/step - loss: 11.4506 - mae: 11.4506\n","Epoch 46/100\n","1/1 [==============================] - 0s 9ms/step - loss: 11.3181 - mae: 11.3181\n","Epoch 47/100\n","1/1 [==============================] - 0s 9ms/step - loss: 11.1856 - mae: 11.1856\n","Epoch 48/100\n","1/1 [==============================] - 0s 14ms/step - loss: 11.0531 - mae: 11.0531\n","Epoch 49/100\n","1/1 [==============================] - 0s 13ms/step - loss: 10.9206 - mae: 10.9206\n","Epoch 50/100\n","1/1 [==============================] - 0s 8ms/step - loss: 10.7881 - mae: 10.7881\n","Epoch 51/100\n","1/1 [==============================] - 0s 8ms/step - loss: 10.6556 - mae: 10.6556\n","Epoch 52/100\n","1/1 [==============================] - 0s 11ms/step - loss: 10.5231 - mae: 10.5231\n","Epoch 53/100\n","1/1 [==============================] - 0s 13ms/step - loss: 10.3906 - mae: 10.3906\n","Epoch 54/100\n","1/1 [==============================] - 0s 8ms/step - loss: 10.2581 - mae: 10.2581\n","Epoch 55/100\n","1/1 [==============================] - 0s 15ms/step - loss: 10.1256 - mae: 10.1256\n","Epoch 56/100\n","1/1 [==============================] - 0s 12ms/step - loss: 9.9931 - mae: 9.9931\n","Epoch 57/100\n","1/1 [==============================] - 0s 10ms/step - loss: 9.8606 - mae: 9.8606\n","Epoch 58/100\n","1/1 [==============================] - 0s 10ms/step - loss: 9.7281 - mae: 9.7281\n","Epoch 59/100\n","1/1 [==============================] - 0s 14ms/step - loss: 9.5956 - mae: 9.5956\n","Epoch 60/100\n","1/1 [==============================] - 0s 9ms/step - loss: 9.4631 - mae: 9.4631\n","Epoch 61/100\n","1/1 [==============================] - 0s 9ms/step - loss: 9.3306 - mae: 9.3306\n","Epoch 62/100\n","1/1 [==============================] - 0s 9ms/step - loss: 9.1981 - mae: 9.1981\n","Epoch 63/100\n","1/1 [==============================] - 0s 8ms/step - loss: 9.0656 - mae: 9.0656\n","Epoch 64/100\n","1/1 [==============================] - 0s 16ms/step - loss: 8.9331 - mae: 8.9331\n","Epoch 65/100\n","1/1 [==============================] - 0s 12ms/step - loss: 8.8006 - mae: 8.8006\n","Epoch 66/100\n","1/1 [==============================] - 0s 8ms/step - loss: 8.6681 - mae: 8.6681\n","Epoch 67/100\n","1/1 [==============================] - 0s 10ms/step - loss: 8.5356 - mae: 8.5356\n","Epoch 68/100\n","1/1 [==============================] - 0s 11ms/step - loss: 8.4031 - mae: 8.4031\n","Epoch 69/100\n","1/1 [==============================] - 0s 13ms/step - loss: 8.2706 - mae: 8.2706\n","Epoch 70/100\n","1/1 [==============================] - 0s 10ms/step - loss: 8.1381 - mae: 8.1381\n","Epoch 71/100\n","1/1 [==============================] - 0s 11ms/step - loss: 8.0056 - mae: 8.0056\n","Epoch 72/100\n","1/1 [==============================] - 0s 11ms/step - loss: 7.8731 - mae: 7.8731\n","Epoch 73/100\n","1/1 [==============================] - 0s 11ms/step - loss: 7.7406 - mae: 7.7406\n","Epoch 74/100\n","1/1 [==============================] - 0s 11ms/step - loss: 7.6081 - mae: 7.6081\n","Epoch 75/100\n","1/1 [==============================] - 0s 9ms/step - loss: 7.4756 - mae: 7.4756\n","Epoch 76/100\n","1/1 [==============================] - 0s 8ms/step - loss: 7.3431 - mae: 7.3431\n","Epoch 77/100\n","1/1 [==============================] - 0s 8ms/step - loss: 7.2106 - mae: 7.2106\n","Epoch 78/100\n","1/1 [==============================] - 0s 10ms/step - loss: 7.0781 - mae: 7.0781\n","Epoch 79/100\n","1/1 [==============================] - 0s 9ms/step - loss: 6.9506 - mae: 6.9506\n","Epoch 80/100\n","1/1 [==============================] - 0s 12ms/step - loss: 6.9450 - mae: 6.9450\n","Epoch 81/100\n","1/1 [==============================] - 0s 14ms/step - loss: 6.9394 - mae: 6.9394\n","Epoch 82/100\n","1/1 [==============================] - 0s 31ms/step - loss: 6.9338 - mae: 6.9338\n","Epoch 83/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.9281 - mae: 6.9281\n","Epoch 84/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.9225 - mae: 6.9225\n","Epoch 85/100\n","1/1 [==============================] - 0s 15ms/step - loss: 6.9169 - mae: 6.9169\n","Epoch 86/100\n","1/1 [==============================] - 0s 10ms/step - loss: 6.9113 - mae: 6.9113\n","Epoch 87/100\n","1/1 [==============================] - 0s 12ms/step - loss: 6.9056 - mae: 6.9056\n","Epoch 88/100\n","1/1 [==============================] - 0s 15ms/step - loss: 6.9000 - mae: 6.9000\n","Epoch 89/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.8944 - mae: 6.8944\n","Epoch 90/100\n","1/1 [==============================] - 0s 8ms/step - loss: 6.8888 - mae: 6.8888\n","Epoch 91/100\n","1/1 [==============================] - 0s 10ms/step - loss: 6.8831 - mae: 6.8831\n","Epoch 92/100\n","1/1 [==============================] - 0s 12ms/step - loss: 6.8775 - mae: 6.8775\n","Epoch 93/100\n","1/1 [==============================] - 0s 12ms/step - loss: 6.8719 - mae: 6.8719\n","Epoch 94/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.8663 - mae: 6.8663\n","Epoch 95/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.8606 - mae: 6.8606\n","Epoch 96/100\n","1/1 [==============================] - 0s 10ms/step - loss: 6.8550 - mae: 6.8550\n","Epoch 97/100\n","1/1 [==============================] - 0s 13ms/step - loss: 6.8494 - mae: 6.8494\n","Epoch 98/100\n","1/1 [==============================] - 0s 9ms/step - loss: 6.8438 - mae: 6.8438\n","Epoch 99/100\n","1/1 [==============================] - 0s 8ms/step - loss: 6.8381 - mae: 6.8381\n","Epoch 100/100\n","1/1 [==============================] - 0s 11ms/step - loss: 6.8325 - mae: 6.8325\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ff9f9b05180>"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"1CIKSm7filgj"},"source":["You might've noticed the loss value decrease from before (and keep decreasing as the number of epochs gets higher). \n","\n","What do you think this means for when we make a prediction with our model?\n","\n","How about we try predict on 17.0 again?"]},{"cell_type":"code","metadata":{"id":"_YcacZsfi4zZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ac279303-8ae2-41bd-b7e5-6f0e93b31217","executionInfo":{"status":"ok","timestamp":1685355962549,"user_tz":-540,"elapsed":49,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Remind ourselves of what X and y are\n","X, y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<tf.Tensor: shape=(8,), dtype=float32, numpy=array([-7., -4., -1.,  2.,  5.,  8., 11., 14.], dtype=float32)>,\n"," <tf.Tensor: shape=(8,), dtype=float32, numpy=array([ 3.,  6.,  9., 12., 15., 18., 21., 24.], dtype=float32)>)"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"e6k5V08ZivNO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2080f5b4-185c-4b12-b217-3a2269cc7b37","executionInfo":{"status":"ok","timestamp":1685355962549,"user_tz":-540,"elapsed":37,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Try and predict what y would be if X was 17.0\n","model.predict([17.0]) # the right answer is 27.0 (y = X + 10)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 64ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[29.175299]], dtype=float32)"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"sYi5V8ZYi_dy"},"source":["Much better! \n","\n","We got closer this time. But we could still be better.\n","\n","Now we've trained a model, how could we evaluate it?"]},{"cell_type":"markdown","metadata":{"id":"HvC98q_h6zvG"},"source":["## Evaluating a model \n","\n","A typical workflow you'll go through when building neural networks is:\n","\n","```\n","Build a model -> evaluate it -> build (tweak) a model -> evaulate it -> build (tweak) a model -> evaluate it...\n","```\n","\n","The tweaking comes from maybe not building a model from scratch but adjusting an existing one.\n","\n","### Visualize, visualize, visualize\n","\n","When it comes to evaluation, you'll want to remember the words: \"visualize, visualize, visualize.\" \n","\n","This is because you're probably better looking at something (doing) than you are thinking about something.\n","\n","It's a good idea to visualize:\n","* **The data** - what data are you working with? What does it look like?\n","* **The model itself** - what does the architecture look like? What are the different shapes?\n","* **The training of a model** - how does a model perform while it learns?\n","* **The predictions of a model** - how do the predictions of a model line up against the ground truth (the original labels)?\n","\n","Let's start by visualizing the model.\n","\n","But first, we'll create a little bit of a bigger dataset and a new model we can use (it'll be the same as before, but the more practice the better).\n"]},{"cell_type":"code","metadata":{"id":"srxuqbeYopns","colab":{"base_uri":"https://localhost:8080/"},"outputId":"68eafd49-5f1b-4b23-8b8f-d888c5f4e893","executionInfo":{"status":"ok","timestamp":1685355962550,"user_tz":-540,"elapsed":34,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make a bigger dataset\n","X = np.arange(-100, 100, 4)\n","X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-100,  -96,  -92,  -88,  -84,  -80,  -76,  -72,  -68,  -64,  -60,\n","        -56,  -52,  -48,  -44,  -40,  -36,  -32,  -28,  -24,  -20,  -16,\n","        -12,   -8,   -4,    0,    4,    8,   12,   16,   20,   24,   28,\n","         32,   36,   40,   44,   48,   52,   56,   60,   64,   68,   72,\n","         76,   80,   84,   88,   92,   96])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"pQcC0nSko3kJ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"186f3aa0-40eb-439c-f361-f80ee4ad4697","executionInfo":{"status":"ok","timestamp":1685355962550,"user_tz":-540,"elapsed":32,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make labels for the dataset (adhering to the same pattern as before)\n","y = np.arange(-90, 110, 4)\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-90, -86, -82, -78, -74, -70, -66, -62, -58, -54, -50, -46, -42,\n","       -38, -34, -30, -26, -22, -18, -14, -10,  -6,  -2,   2,   6,  10,\n","        14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,  62,\n","        66,  70,  74,  78,  82,  86,  90,  94,  98, 102, 106])"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"KNIw5tgGpKjb"},"source":["Since $y=X+10$, we could make the labels like so:"]},{"cell_type":"code","metadata":{"id":"ACgbmrAOpJwW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"0b544915-3768-4ab6-90e1-11401f34d7ba","executionInfo":{"status":"ok","timestamp":1685355962550,"user_tz":-540,"elapsed":31,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Same result as above\n","y = X + 10\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-90, -86, -82, -78, -74, -70, -66, -62, -58, -54, -50, -46, -42,\n","       -38, -34, -30, -26, -22, -18, -14, -10,  -6,  -2,   2,   6,  10,\n","        14,  18,  22,  26,  30,  34,  38,  42,  46,  50,  54,  58,  62,\n","        66,  70,  74,  78,  82,  86,  90,  94,  98, 102, 106])"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"ax3MnQDupeBp"},"source":["## Split data into training/test set\n","\n","One of the other most common and important steps in a machine learning project is creating a training and test set (and when required, a validation set).\n","\n","Each set serves a specific purpose:\n","* **Training set** - the model learns from this data, which is typically 70-80% of the total data available (like the course materials you study during the semester).\n","* **Validation set** - the model gets tuned on this data, which is typically 10-15% of the total data available (like the practice exam you take before the final exam).\n","* **Test set** - the model gets evaluated on this data to test what it has learned, it's typically 10-15% of the total data available (like the final exam you take at the end of the semester).\n","\n","For now, we'll just use a training and test set, this means we'll have a dataset for our model to learn on as well as be evaluated on.\n","\n","We can create them by splitting our `X` and `y` arrays.\n","\n","> ðŸ”‘ **Note:** When dealing with real-world data, this step is typically done right at the start of a project (the test set should always be kept separate from all other data). We want our model to learn on training data and then evaluate it on test data to get an indication of how well it **generalizes** to unseen examples."]},{"cell_type":"code","metadata":{"id":"5G0RDMnZrgvK","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b0eab77-b4a4-4112-d6c0-3c2059b491cd","executionInfo":{"status":"ok","timestamp":1685355962551,"user_tz":-540,"elapsed":30,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Check how many samples we have\n","len(X)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["50"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"4Q9ptcQkrGfO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"df6b89e6-f442-4702-cfd6-78dd0e6462d0","executionInfo":{"status":"ok","timestamp":1685355962551,"user_tz":-540,"elapsed":28,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Split data into train and test sets\n","X_train = X[:40] # first 40 examples (80% of data)\n","y_train = y[:40]\n","\n","X_test = X[40:] # last 10 examples (20% of data)\n","y_test = y[40:]\n","\n","len(X_train), len(X_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(40, 10)"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"Rz2cIdECsLH5"},"source":["## Visualizing the data\n","\n","Now we've got our training and test data, it's a good idea to visualize it.\n","\n","Let's plot it with some nice colours to differentiate what's what."]},{"cell_type":"code","metadata":{"id":"os30CXBHsOAH","colab":{"base_uri":"https://localhost:8080/","height":599},"outputId":"9d940f42-8a0d-488a-b7f1-0a2de9317a57","executionInfo":{"status":"ok","timestamp":1685355962551,"user_tz":-540,"elapsed":26,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["plt.figure(figsize=(10, 7))\n","# Plot training data in blue\n","plt.scatter(X_train, y_train, c='b', label='Training data')\n","# Plot test data in green\n","plt.scatter(X_test, y_test, c='g', label='Testing data')\n","# Show the legend\n","plt.legend();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"cxRcHZFgtS_B"},"source":["Beautiful! Any time you can visualize your data, your model, your anything, it's a good idea. \n","\n","With this graph in mind, what we'll be trying to do is build a model which learns the pattern in the blue dots (`X_train`) to draw the green dots (`X_test`).\n","\n","Time to build a model. We'll make the exact same one from before (the one we trained for longer)."]},{"cell_type":"code","metadata":{"id":"4qpe0eSStSm-"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a model (same as above)\n","model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile model (same as above)\n","model.compile(loss=tf.keras.losses.mae,\n","              optimizer=tf.keras.optimizers.SGD(),\n","              metrics=[\"mae\"])\n","\n","# Fit model (same as above)\n","# model.fit(X_train, y_train, epochs= 100)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hc2RHCCfqlAc"},"source":["## Visualizing the model\n","\n","After you've built a model, you might want to take a look at it (especially if you haven't built many before).\n","\n","You can take a look at the layers and shapes of your model by calling [`summary()`](https://www.tensorflow.org/api_docs/python/tf/keras/Model#summary) on it.\n","\n","> ðŸ”‘ **Note:** Visualizing a model is particularly helpful when you run into input and output shape mismatches."]},{"cell_type":"code","metadata":{"id":"OlgJj0cFwChH","colab":{"base_uri":"https://localhost:8080/","height":348},"outputId":"1c2988d5-535e-4889-ebff-90c96783aae2","executionInfo":{"status":"error","timestamp":1685355962552,"user_tz":-540,"elapsed":24,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Doesn't work (model not fit/built)\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-7d09d31d4e66>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Doesn't work (model not fit/built)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36msummary\u001b[0;34m(self, line_length, positions, print_fn, expand_nested, show_trainable, layer_range)\u001b[0m\n\u001b[1;32m   3227\u001b[0m         \"\"\"\n\u001b[1;32m   3228\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuilt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3229\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m   3230\u001b[0m                 \u001b[0;34m\"This model has not yet been built. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3231\u001b[0m                 \u001b[0;34m\"Build the model first by calling `build()` or by calling \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: This model has not yet been built. Build the model first by calling `build()` or by calling the model on a batch of data."]}]},{"cell_type":"markdown","metadata":{"id":"SJj6KLe8xsyF"},"source":["Ahh, the cell above errors because we haven't fit or built our model.\n","\n","We also haven't told it what input shape it should be expecting.\n","\n","Remember above, how we discussed the input shape was just one number?\n","\n","We can let our model know the input shape of our data using the `input_shape` parameter to the first layer (usually if `input_shape` isn't defined, Keras tries to figure it out automatically)."]},{"cell_type":"code","metadata":{"id":"zMXKFtFBuWgJ"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a model (same as above)\n","model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1, input_shape=[1]) # define the input_shape to our model\n","])\n","\n","# Compile model (same as above)\n","model.compile(loss=tf.keras.losses.mae,\n","              optimizer=tf.keras.optimizers.SGD(),\n","              metrics=[\"mae\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"24Q325x2yCoi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1685356215482,"user_tz":-540,"elapsed":514,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"abdd30ae-8329-4cbd-bab8-02cd0700c24e"},"source":["# This will work after specifying the \"input shape\"\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_3 (Dense)             (None, 1)                 2         \n","                                                                 \n","=================================================================\n","Total params: 2\n","Trainable params: 2\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"jdurWKlryl6b"},"source":["Calling `summary()` on our model shows us the layers it contains, the output shape and the number of parameters.\n","* **Total params** - total number of parameters in the model.\n","* **Trainable parameters** - these are the parameters (patterns) the model can update as it trains.\n","* **Non-trainable parameters** - these parameters aren't updated during training (this is typical when you bring in the already learned patterns from other models during transfer learning).\n","\n","> ðŸ“– **Resource:** For a more in-depth overview of the trainable parameters within a layer, check out [MIT's introduction to deep learning video](https://youtu.be/njKP3FqW3Sk).\n","\n","> ðŸ›  **Exercise:** Try playing around with the number of hidden units in the `Dense` layer (e.g. `Dense(2)`, `Dense(3)`). How does this change the Total/Trainable params? Investigate what's causing the change.\n","\n","For now, all you need to think about these parameters is that their learnable patterns in the data.\n","\n","Let's fit our model to the training data."]},{"cell_type":"code","metadata":{"id":"-Kywg4q9u051","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7984e38a-5273-4da1-ede9-05145a22c7fd","executionInfo":{"status":"ok","timestamp":1685356220231,"user_tz":-540,"elapsed":2175,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Fit the model to the training data\n","model.fit(X_train, y_train, epochs=100, verbose=0) # verbose controls how much gets output"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ff9f82027d0>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"-jWuOwj961ri","colab":{"base_uri":"https://localhost:8080/"},"outputId":"4a1a2987-ebe2-44ac-d8e3-5b6827802f6c","executionInfo":{"status":"ok","timestamp":1685356222788,"user_tz":-540,"elapsed":4,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Check the model summary\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_3 (Dense)             (None, 1)                 2         \n","                                                                 \n","=================================================================\n","Total params: 2\n","Trainable params: 2\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"RrrkHEkMYh5A"},"source":["Alongside summary, you can also view a 2D plot of the model using [`plot_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/utils/plot_model)."]},{"cell_type":"code","source":["from tensorflow.keras.utils import plot_model \n","\n","plot_model(model, show_shapes= True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":201},"id":"7TW6fA-NNfqE","executionInfo":{"status":"ok","timestamp":1685356225671,"user_tz":-540,"elapsed":4,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"3a68b125-0d72-48f0-843a-253c13570d40"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"ygw7V8OVYxQS"},"source":["In our case, the model we used only has an input and an output but visualizing more complicated models can be very helpful for debugging."]},{"cell_type":"markdown","metadata":{"id":"gebj2eptqwg8"},"source":["## Visualizing the predictions\n","\n","Now we've got a trained model, let's visualize some predictions.\n","\n","To visualize predictions, it's always a good idea to plot them against the ground truth labels.\n","\n","Often you'll see this in the form of `y_test` vs. `y_pred` (ground truth vs. predictions).\n","\n","First, we'll make some predictions on the test data (`X_test`), remember the model has never seen the test data."]},{"cell_type":"code","metadata":{"id":"RRzj7LJMYftb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ac71128f-2146-4f1e-8a73-dcade7d3c343","executionInfo":{"status":"ok","timestamp":1685356228378,"user_tz":-540,"elapsed":2,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make predictions\n","y_preds = model.predict(X_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 37ms/step\n"]}]},{"cell_type":"code","metadata":{"id":"_hKpW-KOZiAW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c4d2ba15-ccc2-45d3-f044-fa0dcf0b533a","executionInfo":{"status":"ok","timestamp":1685356230648,"user_tz":-540,"elapsed":4,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# View the predictions\n","y_preds"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[44.45975 ],\n","       [47.33611 ],\n","       [50.212467],\n","       [53.088825],\n","       [55.965183],\n","       [58.84154 ],\n","       [61.717903],\n","       [64.59426 ],\n","       [67.47062 ],\n","       [70.346985]], dtype=float32)"]},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"aPRaFncaZnT-"},"source":["Okay, we get a list of numbers but how do these compare to the ground truth labels?\n","\n","Let's build a plotting function to find out.\n","\n","> ðŸ”‘ **Note:** If you think you're going to be visualizing something a lot, it's a good idea to functionize it so you can use it later."]},{"cell_type":"code","metadata":{"id":"56euC69rZvNJ"},"source":["def plot_predictions(train_data=X_train, \n","                     train_labels=y_train, \n","                     test_data=X_test, \n","                     test_labels=y_test, \n","                     predictions=y_preds):\n","  \"\"\"\n","  Plots training data, test data and compares predictions.\n","  \"\"\"\n","  plt.figure(figsize=(10, 7))\n","  # Plot training data in blue\n","  plt.scatter(train_data, train_labels, c=\"b\", label=\"Training data\")\n","  # Plot test data in green\n","  plt.scatter(test_data, test_labels, c=\"g\", label=\"Testing data\")\n","  # Plot the predictions in red (predictions were made on the test data)\n","  plt.scatter(test_data, predictions, c=\"r\", label=\"Predictions\")\n","  # Show the legend\n","  plt.legend();"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fug5_B6Ab7Ah","colab":{"base_uri":"https://localhost:8080/","height":599},"outputId":"b0756cf0-8bba-4ed3-9148-c3d6e064606e","executionInfo":{"status":"ok","timestamp":1685356239926,"user_tz":-540,"elapsed":8,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["plot_predictions(train_data=X_train,\n","                 train_labels=y_train,\n","                 test_data=X_test,\n","                 test_labels=y_test,\n","                 predictions=y_preds)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"H63NPcgPcwZV"},"source":["From the plot we can see our predictions aren't totally outlandish but they definitely aren't anything special either."]},{"cell_type":"markdown","metadata":{"id":"orAfIWOrgRDA"},"source":["## Evaluating predictions\n","\n","Alongisde visualizations, evaulation metrics are your alternative best option for evaluating your model.\n","\n","Depending on the problem you're working on, different models have different evaluation metrics. \n","\n","Two of the main metrics used for regression problems are:\n","* **Mean absolute error (MAE)** - the mean difference between each of the predictions.\n","* **Mean squared error (MSE)** - the squared mean difference between of the predictions (use if larger errors are more detrimental than smaller errors).\n","\n","The lower each of these values, the better.\n","\n","You can also use [`model.evaluate()`](https://www.tensorflow.org/api_docs/python/tf/keras/Model#evaluate) which will return the loss of the model as well as any metrics setup during the compile step."]},{"cell_type":"code","metadata":{"id":"DPgTdF3ddxiY","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b2ee36f3-1f3d-48dd-a4a9-40666798e614"},"source":["# Evaluate the model on the test set\n","model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 132ms/step - loss: 30.4843 - mae: 30.4843\n"]},{"output_type":"execute_result","data":{"text/plain":["[30.484329223632812, 30.484329223632812]"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"DAXIRyVzegFd"},"source":["In our case, since we used MAE for the loss function as well as MAE for the metrics, `model.evaulate()` returns them both.\n","\n","TensorFlow also has built in functions for MSE and MAE.\n","\n","For many evaluation functions, the premise is the same: compare predictions to the ground truth labels."]},{"cell_type":"code","metadata":{"id":"gqoMQ0dJeD2S","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2c170104-793b-43c9-dfd3-31bc8264e2e4"},"source":["# Calculate the mean absolute error\n","mae = tf.metrics.mean_absolute_error(y_true=y_test, \n","                                     y_pred=y_preds)\n","mae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(10,), dtype=float32, numpy=\n","array([43.455303, 40.572865, 37.690426, 34.807987, 31.925549, 29.04311 ,\n","       26.160675, 23.278236, 20.39579 , 17.610687], dtype=float32)>"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"7pYp3XNYfkyC"},"source":["Huh? That's strange, MAE should be a single output.\n","\n","Instead, we get 10 values.\n","\n","This is because our `y_test` and `y_preds` tensors are different shapes."]},{"cell_type":"code","metadata":{"id":"zeUHwOc2gIV4","colab":{"base_uri":"https://localhost:8080/"},"outputId":"48a311bd-b9eb-4caf-ff7f-a1a28b44abc8"},"source":["# Check the test label tensor values\n","y_test"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 70,  74,  78,  82,  86,  90,  94,  98, 102, 106])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"3aJwlTxugPyc","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d329ceba-d669-4808-c6eb-3dc7388f8cfe"},"source":["# Check the predictions tensor values (notice the extra square brackets)\n","y_preds"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[44.544697],\n","       [47.427135],\n","       [50.309574],\n","       [53.192013],\n","       [56.07445 ],\n","       [58.95689 ],\n","       [61.839325],\n","       [64.72176 ],\n","       [67.60421 ],\n","       [70.48664 ]], dtype=float32)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"xolZ-lmge_ES","colab":{"base_uri":"https://localhost:8080/"},"outputId":"39274fda-255e-4b41-c9ce-fb70faf31cb9"},"source":["# Check the tensor shapes\n","y_test.shape, y_preds.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((10,), (10, 1))"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"eW1qleu5gHyZ"},"source":["Remember how we discussed dealing with different input and output shapes is one the most common issues you'll come across, this is one of those times.\n","\n","But not to worry.\n","\n","We can fix it using [`squeeze()`](https://www.tensorflow.org/api_docs/python/tf/squeeze), it'll remove the the `1` dimension from our `y_preds` tensor, making it the same shape as `y_test`.\n","\n","> ðŸ”‘ **Note:** If you're comparing two tensors, it's important to make sure they're the right shape(s) (you won't always have to manipulate the shapes, but always be on the look out, *many* errors are the result of mismatched tensors, especially mismatched input and output shapes)."]},{"cell_type":"code","metadata":{"id":"tVtMyw70g4aF","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c542f5ec-1a13-4073-b1a5-e536bd22a4ff"},"source":["# Shape before squeeze()\n","y_preds.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10, 1)"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"qnYaBnCng-Nq","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a2046fd7-6f44-4bae-a8b0-1e8a0d2151f2"},"source":["# Shape after squeeze()\n","y_preds.squeeze().shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10,)"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"HxvVeD64hEX8","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e8be73f4-109b-4273-cd2b-12f4b35f2aaa"},"source":["# What do they look like?\n","y_test, y_preds.squeeze()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 70,  74,  78,  82,  86,  90,  94,  98, 102, 106]),\n"," array([44.544697, 47.427135, 50.309574, 53.192013, 56.07445 , 58.95689 ,\n","        61.839325, 64.72176 , 67.60421 , 70.48664 ], dtype=float32))"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"mfUCIeHyhLk7"},"source":["Okay, now we know how to make our `y_test` and `y_preds` tenors the same shape, let's use our evaluation metrics."]},{"cell_type":"code","metadata":{"id":"TvjY6GIJvXBO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"c5e93778-9d5e-47c3-fe77-f2d5d2b18b01","executionInfo":{"status":"ok","timestamp":1685357031242,"user_tz":-540,"elapsed":4,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Calcuate the MAE\n","mae = tf.metrics.mean_absolute_error(y_true=y_test, \n","                                     y_pred=y_preds.squeeze()) # use squeeze() to make same shape\n","mae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=30.596638>"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"EwA9nGJzvbMT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"401bfaea-7ee3-4fed-e556-a7c17aa371a7"},"source":["# Calculate the MSE\n","mse = tf.metrics.mean_squared_error(y_true=y_test,\n","                                    y_pred=y_preds.squeeze())\n","mse"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float32, numpy=939.59827>"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"X06oo_CIjPbL"},"source":["We can also calculate the MAE using pure TensorFlow functions."]},{"cell_type":"code","metadata":{"id":"YxiD6-QBYSzd","colab":{"base_uri":"https://localhost:8080/"},"outputId":"40eecb0e-aa23-4c52-ae02-794cc9fd48ce"},"source":["# Returns the same as tf.metrics.mean_absolute_error()\n","tf.reduce_mean(tf.abs(y_test-y_preds.squeeze()))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(), dtype=float64, numpy=30.484329986572266>"]},"metadata":{},"execution_count":42}]},{"cell_type":"markdown","metadata":{"id":"rmEho4lYofOa"},"source":["Again, it's a good idea to functionize anything you think you might use over again (or find yourself using over and over again).\n","\n","Let's make functions for our evaluation metrics."]},{"cell_type":"code","metadata":{"id":"bs1Z2jgNol5f"},"source":["def mae(y_test, y_pred):\n","  \"\"\"\n","  Calculuates mean absolute error between y_test and y_preds.\n","  \"\"\"\n","  return tf.metrics.mean_absolute_error(y_test,\n","                                        y_pred)\n","  \n","def mse(y_test, y_pred):\n","  \"\"\"\n","  Calculates mean squared error between y_test and y_preds.\n","  \"\"\"\n","  return tf.metrics.mean_squared_error(y_test,\n","                                       y_pred)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zub5zK7bcl40"},"source":["## Running experiments to improve a model\n","\n","After seeing the evaluation metrics and the predictions your model makes, it's likely you'll want to improve it.\n","\n","Again, there are many different ways you can do this, but 3 of the main ones are:\n","1. **Get more data** - get more examples for your model to train on (more opportunities to learn patterns).\n","2. **Make your model larger (use a more complex model)** - this might come in the form of more layers or more hidden units in each layer.\n","3. **Train for longer** - give your model more of a chance to find the patterns in the data.\n","\n","Since we created our dataset, we could easily make more data but this isn't always the case when you're working with real-world datasets.\n","\n","So let's take a look at how we can improve our model using 2 and 3.\n","\n","To do so, we'll build 3 models and compare their results:\n","1. `model_1` - same as original model, 1 layer, trained for 100 epochs.\n","2. `model_2` - 2 layers, trained for 100 epochs.\n","3. `model_3` - 2 layers, trained for 500 epochs.\n","\n","**Build `model_1`**"]},{"cell_type":"code","metadata":{"id":"StVHIIM9csyS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"aab11cec-0c91-4310-ac6d-2beccd07d054","executionInfo":{"status":"ok","timestamp":1685357452194,"user_tz":-540,"elapsed":2522,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Replicate original model\n","model_1 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","model_1.compile(loss=tf.keras.losses.mae,\n","                optimizer=tf.keras.optimizers.SGD(),\n","                metrics=['mae'])\n","\n","# Fit the model\n","model_1.fit(tf.expand_dims(X_train, axis=-1), y_train, epochs=100)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","2/2 [==============================] - 0s 10ms/step - loss: 18.5253 - mae: 18.5253\n","Epoch 2/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.9296 - mae: 11.9296\n","Epoch 3/100\n","2/2 [==============================] - 0s 5ms/step - loss: 11.0831 - mae: 11.0831\n","Epoch 4/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.3075 - mae: 9.3075\n","Epoch 5/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.1782 - mae: 10.1782\n","Epoch 6/100\n","2/2 [==============================] - 0s 5ms/step - loss: 9.4390 - mae: 9.4390\n","Epoch 7/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.5771 - mae: 8.5771\n","Epoch 8/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.0409 - mae: 9.0409\n","Epoch 9/100\n","2/2 [==============================] - 0s 6ms/step - loss: 18.7759 - mae: 18.7759\n","Epoch 10/100\n","2/2 [==============================] - 0s 5ms/step - loss: 10.1248 - mae: 10.1248\n","Epoch 11/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.3997 - mae: 8.3997\n","Epoch 12/100\n","2/2 [==============================] - 0s 5ms/step - loss: 10.6716 - mae: 10.6716\n","Epoch 13/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.7983 - mae: 9.7983\n","Epoch 14/100\n","2/2 [==============================] - 0s 6ms/step - loss: 16.0367 - mae: 16.0367\n","Epoch 15/100\n","2/2 [==============================] - 0s 5ms/step - loss: 11.3811 - mae: 11.3811\n","Epoch 16/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.5422 - mae: 8.5422\n","Epoch 17/100\n","2/2 [==============================] - 0s 6ms/step - loss: 13.6460 - mae: 13.6460\n","Epoch 18/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.4780 - mae: 11.4780\n","Epoch 19/100\n","2/2 [==============================] - 0s 5ms/step - loss: 17.8887 - mae: 17.8887\n","Epoch 20/100\n","2/2 [==============================] - 0s 6ms/step - loss: 15.0235 - mae: 15.0235\n","Epoch 21/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.8887 - mae: 10.8887\n","Epoch 22/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.6451 - mae: 8.6451\n","Epoch 23/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.6684 - mae: 9.6684\n","Epoch 24/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.5721 - mae: 8.5721\n","Epoch 25/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.5651 - mae: 11.5651\n","Epoch 26/100\n","2/2 [==============================] - 0s 6ms/step - loss: 15.1597 - mae: 15.1597\n","Epoch 27/100\n","2/2 [==============================] - 0s 5ms/step - loss: 12.0457 - mae: 12.0457\n","Epoch 28/100\n","2/2 [==============================] - 0s 6ms/step - loss: 13.3383 - mae: 13.3383\n","Epoch 29/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.5943 - mae: 9.5943\n","Epoch 30/100\n","2/2 [==============================] - 0s 5ms/step - loss: 17.1231 - mae: 17.1231\n","Epoch 31/100\n","2/2 [==============================] - 0s 6ms/step - loss: 22.9282 - mae: 22.9282\n","Epoch 32/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.9089 - mae: 7.9089\n","Epoch 33/100\n","2/2 [==============================] - 0s 6ms/step - loss: 14.0935 - mae: 14.0935\n","Epoch 34/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.3298 - mae: 12.3298\n","Epoch 35/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.2676 - mae: 8.2676\n","Epoch 36/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.4971 - mae: 10.4971\n","Epoch 37/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.1380 - mae: 10.1380\n","Epoch 38/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.3455 - mae: 11.3455\n","Epoch 39/100\n","2/2 [==============================] - 0s 7ms/step - loss: 14.7159 - mae: 14.7159\n","Epoch 40/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.8465 - mae: 12.8465\n","Epoch 41/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.2317 - mae: 9.2317\n","Epoch 42/100\n","2/2 [==============================] - 0s 5ms/step - loss: 11.0207 - mae: 11.0207\n","Epoch 43/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.3314 - mae: 8.3314\n","Epoch 44/100\n","2/2 [==============================] - 0s 6ms/step - loss: 13.0842 - mae: 13.0842\n","Epoch 45/100\n","2/2 [==============================] - 0s 6ms/step - loss: 13.6324 - mae: 13.6324\n","Epoch 46/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.2571 - mae: 8.2571\n","Epoch 47/100\n","2/2 [==============================] - 0s 7ms/step - loss: 8.7348 - mae: 8.7348\n","Epoch 48/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.0406 - mae: 10.0406\n","Epoch 49/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.5203 - mae: 8.5203\n","Epoch 50/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.0295 - mae: 9.0295\n","Epoch 51/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.3744 - mae: 9.3744\n","Epoch 52/100\n","2/2 [==============================] - 0s 6ms/step - loss: 14.0554 - mae: 14.0554\n","Epoch 53/100\n","2/2 [==============================] - 0s 6ms/step - loss: 15.3923 - mae: 15.3923\n","Epoch 54/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.8992 - mae: 10.8992\n","Epoch 55/100\n","2/2 [==============================] - 0s 6ms/step - loss: 15.4242 - mae: 15.4242\n","Epoch 56/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.1170 - mae: 9.1170\n","Epoch 57/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.6921 - mae: 9.6921\n","Epoch 58/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.9976 - mae: 8.9976\n","Epoch 59/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.2320 - mae: 10.2320\n","Epoch 60/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.1629 - mae: 8.1629\n","Epoch 61/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.0317 - mae: 10.0317\n","Epoch 62/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.0300 - mae: 7.0300\n","Epoch 63/100\n","2/2 [==============================] - 0s 14ms/step - loss: 12.6706 - mae: 12.6706\n","Epoch 64/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.6147 - mae: 12.6147\n","Epoch 65/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.4360 - mae: 9.4360\n","Epoch 66/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.5035 - mae: 11.5035\n","Epoch 67/100\n","2/2 [==============================] - 0s 7ms/step - loss: 8.0317 - mae: 8.0317\n","Epoch 68/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.5599 - mae: 8.5599\n","Epoch 69/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.2532 - mae: 12.2532\n","Epoch 70/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.9513 - mae: 8.9513\n","Epoch 71/100\n","2/2 [==============================] - 0s 7ms/step - loss: 9.9270 - mae: 9.9270\n","Epoch 72/100\n","2/2 [==============================] - 0s 7ms/step - loss: 9.9653 - mae: 9.9653\n","Epoch 73/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.4365 - mae: 12.4365\n","Epoch 74/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.5615 - mae: 10.5615\n","Epoch 75/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.6248 - mae: 9.6248\n","Epoch 76/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.0912 - mae: 11.0912\n","Epoch 77/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.2736 - mae: 8.2736\n","Epoch 78/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.9650 - mae: 8.9650\n","Epoch 79/100\n","2/2 [==============================] - 0s 7ms/step - loss: 19.7751 - mae: 19.7751\n","Epoch 80/100\n","2/2 [==============================] - 0s 6ms/step - loss: 17.8205 - mae: 17.8205\n","Epoch 81/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.0673 - mae: 7.0673\n","Epoch 82/100\n","2/2 [==============================] - 0s 6ms/step - loss: 10.4027 - mae: 10.4027\n","Epoch 83/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.8270 - mae: 9.8270\n","Epoch 84/100\n","2/2 [==============================] - 0s 7ms/step - loss: 7.9270 - mae: 7.9270\n","Epoch 85/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.4350 - mae: 9.4350\n","Epoch 86/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.4805 - mae: 9.4805\n","Epoch 87/100\n","2/2 [==============================] - 0s 6ms/step - loss: 11.4245 - mae: 11.4245\n","Epoch 88/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.9221 - mae: 9.9221\n","Epoch 89/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.2433 - mae: 7.2433\n","Epoch 90/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.6813 - mae: 12.6813\n","Epoch 91/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.3007 - mae: 7.3007\n","Epoch 92/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.6632 - mae: 7.6632\n","Epoch 93/100\n","2/2 [==============================] - 0s 6ms/step - loss: 7.1094 - mae: 7.1094\n","Epoch 94/100\n","2/2 [==============================] - 0s 6ms/step - loss: 12.5296 - mae: 12.5296\n","Epoch 95/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.9045 - mae: 9.9045\n","Epoch 96/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.1350 - mae: 9.1350\n","Epoch 97/100\n","2/2 [==============================] - 0s 7ms/step - loss: 12.0866 - mae: 12.0866\n","Epoch 98/100\n","2/2 [==============================] - 0s 6ms/step - loss: 9.0512 - mae: 9.0512\n","Epoch 99/100\n","2/2 [==============================] - 0s 6ms/step - loss: 8.4919 - mae: 8.4919\n","Epoch 100/100\n","2/2 [==============================] - 0s 5ms/step - loss: 14.4683 - mae: 14.4683\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ff9f82c0f40>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"A-Da56xspOrY","colab":{"base_uri":"https://localhost:8080/","height":617},"outputId":"3eb7308f-bb99-4023-c6ae-7f1fafab18a2","executionInfo":{"status":"ok","timestamp":1685357565786,"user_tz":-540,"elapsed":1033,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make and plot predictions for model_1\n","y_preds_1 = model_1.predict(X_test)\n","plot_predictions(predictions=y_preds_1)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 39ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"EXxHBAtHoSh2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d0a48914-c28c-4aae-cc1c-aa2adfd94b8c"},"source":["# Calculate model_1 metrics\n","mae_1 = mae(y_test, y_preds_1.squeeze()).numpy()\n","mse_1 = mse(y_test, y_preds_1.squeeze()).numpy()\n","mae_1, mse_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(30.638134, 949.13086)"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"XXELOpdBrE9_"},"source":["**Build `model_2`**\n","\n","This time we'll add an extra dense layer (so now our model will have 2 layers) whilst keeping everything else the same."]},{"cell_type":"code","metadata":{"id":"05vcgEP3rEFi","colab":{"base_uri":"https://localhost:8080/"},"outputId":"38d3aede-85f2-4670-f1d0-168065fdec1b"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Replicate model_1 and add an extra layer\n","model_2 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1),\n","  tf.keras.layers.Dense(1) # add a second layer\n","])\n","\n","# Compile the model\n","model_2.compile(loss=tf.keras.losses.mae,\n","                optimizer=tf.keras.optimizers.SGD(),\n","                metrics=['mae'])\n","\n","# Fit the model\n","model_2.fit(tf.expand_dims(X_train, axis=-1), y_train, epochs=100, verbose=0) # set verbose to 0 for less output"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f00643ba560>"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"9xCbDcoDraux","colab":{"base_uri":"https://localhost:8080/","height":617},"outputId":"028984a5-9d4f-44ca-eb8c-0e76eeadc1b2","executionInfo":{"status":"ok","timestamp":1685359263652,"user_tz":-540,"elapsed":804,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make and plot predictions for model_2\n","y_preds_2 = model_2.predict(X_test)\n","plot_predictions(predictions=y_preds_2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 28ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"GxMYu5Frri6o"},"source":["Woah, that's looking better already! And all it took was an extra layer."]},{"cell_type":"code","metadata":{"id":"9LnPuGaBrcrP","colab":{"base_uri":"https://localhost:8080/"},"outputId":"57f30e96-4218-45cd-8539-a18198dde62c"},"source":["# Calculate model_2 metrics\n","mae_2 = mae(y_test, y_preds_2.squeeze()).numpy()\n","mse_2 = mse(y_test, y_preds_2.squeeze()).numpy()\n","mae_2, mse_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10.610324, 120.35542)"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","metadata":{"id":"R8i9yfQGrwHx"},"source":["**Build `model_3`**\n","\n","For our 3rd model, we'll keep everything the same as `model_2` except this time we'll train for longer (500 epochs instead of 100).\n","\n","This will give our model more of a chance to learn the patterns in the data."]},{"cell_type":"code","metadata":{"id":"ABGwQFsbrvUS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"47e29c0e-bf45-4332-94a0-7a02e2d4f9b2"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Replicate model_2\n","model_3 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1),\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","model_3.compile(loss=tf.keras.losses.mae,\n","                optimizer=tf.keras.optimizers.SGD(),\n","                metrics=['mae'])\n","\n","# Fit the model (this time for 500 epochs, not 100)\n","model_3.fit(tf.expand_dims(X_train, axis=-1), y_train, epochs=500, verbose=0) # set verbose to 0 for less output"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f0065a5c8e0>"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"jEz4bVmasbFk","colab":{"base_uri":"https://localhost:8080/","height":617},"outputId":"2ee1ef98-b40f-428b-8be2-762e408ea44c","executionInfo":{"status":"ok","timestamp":1685358481434,"user_tz":-540,"elapsed":5,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Make and plot predictions for model_3\n","y_preds_3 = model_3.predict(X_test)\n","plot_predictions(predictions=y_preds_3)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 26ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"38Ki8ZHcsztG"},"source":["Strange, we trained for longer but our model performed worse?\n","\n","As it turns out, our model might've trained too long and has thus resulted in worse results (we'll see ways to prevent training for too long later on)."]},{"cell_type":"code","metadata":{"id":"BPTUcFe4sbfk","colab":{"base_uri":"https://localhost:8080/"},"outputId":"2e867a61-9fc2-4fbb-e193-63fb44fc643d"},"source":["# Calculate model_3 metrics\n","mae_3 = mae(y_test, y_preds_3.squeeze()).numpy()\n","mse_3 = mse(y_test, y_preds_3.squeeze()).numpy()\n","mae_3, mse_3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(67.224594, 4601.822)"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"UPEeM3UsrxGB"},"source":["## Comparing results\n","\n","Now we've got results for 3 similar but slightly different results, let's compare them."]},{"cell_type":"code","source":["model_results= [[\"model_1\", mae_1, mse_1],\n","                [\"model_2\", mae_2, mse_2],\n","                [\"model_3\", mae_3, mse_3]]"],"metadata":{"id":"lSpFV8EkMrOM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd \n","\n","all_results= pd.DataFrame(model_results, columns=[\"model\", \"mae\", \"mse\"])\n","all_results"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"BnigyQE3M3-u","executionInfo":{"status":"ok","timestamp":1685358641206,"user_tz":-540,"elapsed":5,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"6d2eab71-4b81-4bc4-e23a-6fbdda5fff06"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     model        mae          mse\n","0  model_1  30.548965   943.606750\n","1  model_2  10.082735   108.945999\n","2  model_3  67.676559  4664.213379"],"text/html":["\n","  <div id=\"df-d37ff6ce-4b18-455b-8e09-9c11d5f75c9d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model</th>\n","      <th>mae</th>\n","      <th>mse</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>model_1</td>\n","      <td>30.548965</td>\n","      <td>943.606750</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>model_2</td>\n","      <td>10.082735</td>\n","      <td>108.945999</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>model_3</td>\n","      <td>67.676559</td>\n","      <td>4664.213379</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d37ff6ce-4b18-455b-8e09-9c11d5f75c9d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d37ff6ce-4b18-455b-8e09-9c11d5f75c9d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d37ff6ce-4b18-455b-8e09-9c11d5f75c9d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":63}]},{"cell_type":"markdown","metadata":{"id":"o_AtUiwuuLGo"},"source":["From our experiments, it looks like `model_2` performed the best.\n","\n","And now, you might be thinking, \"wow, comparing models is tedious...\" and it definitely can be, we've only compared 3 models here. \n","\n","But this is part of what machine learning modelling is about, trying many different combinations of models and seeing which performs best.\n","\n","Each model you build is a small experiment. \n","\n","> ðŸ”‘ **Note:** One of your main goals should be to minimize the time between your experiments. The more experiments you do, the more things you'll figure out which don't work and in turn, get closer to figuring out what does work. Remember the machine learning practitioner's motto: \"experiment, experiment, experiment\".\n","\n","Another thing you'll also find is what you thought may work (such as training a model for longer) may not always work and the exact opposite is also often the case.\n","\n","## Tracking your experiments\n","\n","One really good habit to get into is tracking your modelling experiments to see which perform better than others.\n","\n","We've done a simple version of this above (keeping the results in different variables).\n","\n","> ðŸ“– **Resource:** But as you build more models, you'll want to look into using tools such as:\n","* [**TensorBoard**](https://tensorboard.dev/) - a component of the TensorFlow library to help track modelling experiments (we'll see this later).\n","* [**Weights & Biases**](https://www.wandb.com/) - a tool for tracking all kinds of machine learning experiments (the good news for Weights & Biases is it plugs into TensorBoard)."]},{"cell_type":"markdown","metadata":{"id":"Fe5DgNbX6192"},"source":["## Saving a model\n","\n","Once you've trained a model and found one which performs to your liking, you'll probably want to save it for use elsewhere (like a web application or mobile device).\n","\n","You can save a TensorFlow/Keras model using [`model.save()`](https://www.tensorflow.org/tutorials/keras/save_and_load#save_the_entire_model).\n","\n","There are two ways to save a model in TensorFlow:\n","1. The [SavedModel format](https://www.tensorflow.org/tutorials/keras/save_and_load#savedmodel_format) (default).\n","2. The [HDF5 format](https://www.tensorflow.org/tutorials/keras/save_and_load#hdf5_format).\n","\n","The main difference between the two is the SavedModel is automatically able to save custom objects (such as special layers) without additional modifications when loading the model back in.\n","\n","Which one should you use?\n","\n","It depends on your situation but the SavedModel format will suffice most of the time.\n","\n","Both methods use the same method call."]},{"cell_type":"code","metadata":{"id":"gg0jD2cUoPsg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"bed8ee92-59ef-4a8a-f8a0-1459e3cec25d","executionInfo":{"status":"ok","timestamp":1685359270420,"user_tz":-540,"elapsed":1373,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Save a model using the SavedModel format\n","model_2.save('best_model_SavedModel_format')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _update_step_xla while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"code","metadata":{"id":"dsCpDYrU7D1j","colab":{"base_uri":"https://localhost:8080/"},"outputId":"452be0bc-964e-4ec8-c7c1-815a8528d97c","executionInfo":{"status":"ok","timestamp":1685359282885,"user_tz":-540,"elapsed":1441,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Check it out - outputs a protobuf binary file (.pb) as well as other files\n","!ls best_model_SavedModel_format"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["assets\tfingerprint.pb\tkeras_metadata.pb  saved_model.pb  variables\n"]}]},{"cell_type":"markdown","metadata":{"id":"NGKmWco_SOEU"},"source":["Now let's save the model in the HDF5 format, we'll use the same method but with a different filename."]},{"cell_type":"code","metadata":{"id":"97J6GJMBSM2j"},"source":["# Save a model using the HDF5 format\n","model_2.save(\"best_model_HDF5_format.h5\") # note the addition of '.h5' on the end"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vB7TmsSGSjdv","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d1b2f9e9-ccbb-4ec2-898e-6e1d610bb43a","executionInfo":{"status":"ok","timestamp":1685359410544,"user_tz":-540,"elapsed":457,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Check it out\n","!ls best_model_HDF5_format.h5"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["best_model_HDF5_format.h5\n"]}]},{"cell_type":"markdown","metadata":{"id":"OGA02tY97EUI"},"source":["## Loading a model\n","\n","We can load a saved model using the [`load_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/models/load_model) method.\n","\n","Loading a model for the different formats (SavedModel and HDF5) is the same (as long as the pathnames to the particular formats are correct)."]},{"cell_type":"code","metadata":{"id":"FzyLIWfs7Fvh","colab":{"base_uri":"https://localhost:8080/"},"outputId":"057dbc97-6a10-4e77-f78c-f960c8afe5ff","executionInfo":{"status":"ok","timestamp":1685359293127,"user_tz":-540,"elapsed":565,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Load a model from the SavedModel format\n","loaded_saved_model = tf.keras.models.load_model(\"best_model_SavedModel_format\")\n","loaded_saved_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_7 (Dense)             (None, 1)                 2         \n","                                                                 \n"," dense_8 (Dense)             (None, 1)                 2         \n","                                                                 \n","=================================================================\n","Total params: 4\n","Trainable params: 4\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"MfGO0dCQTeQh"},"source":["Now let's test it out."]},{"cell_type":"code","metadata":{"id":"7rehN8ZxTy43","colab":{"base_uri":"https://localhost:8080/"},"outputId":"23cd7811-f6d6-4dcc-816f-e2fde1492b03"},"source":["# Compare model_2 with the SavedModel version (should return True)\n","model_2_preds = model_2.predict(X_test)\n","saved_model_preds = loaded_saved_model.predict(X_test)\n","mae(y_test, saved_model_preds.squeeze()).numpy() == mae(y_test, model_2_preds.squeeze()).numpy()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 34ms/step\n","1/1 [==============================] - 0s 56ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":60}]},{"cell_type":"markdown","metadata":{"id":"prjkfX6rUZ6a"},"source":["Loading in from the HDF5 is much the same."]},{"cell_type":"code","metadata":{"id":"dQfx-bWKUfRQ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"230c52e5-744e-43da-bd83-74ef1dc862f3","executionInfo":{"status":"ok","timestamp":1685359422627,"user_tz":-540,"elapsed":1506,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Load a model from the HDF5 format\n","loaded_h5_model = tf.keras.models.load_model(\"best_model_HDF5_format.h5\")\n","loaded_h5_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_7 (Dense)             (None, 1)                 2         \n","                                                                 \n"," dense_8 (Dense)             (None, 1)                 2         \n","                                                                 \n","=================================================================\n","Total params: 4\n","Trainable params: 4\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"L0kT91h-Uru-","colab":{"base_uri":"https://localhost:8080/"},"outputId":"eed98108-36e9-47a2-b000-e7b975831578","executionInfo":{"status":"ok","timestamp":1685359526529,"user_tz":-540,"elapsed":373,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Compare model_2 with the loaded HDF5 version (should return True)\n","h5_model_preds = loaded_h5_model.predict(X_test)\n","mae(y_test, h5_model_preds.squeeze()).numpy() == mae(y_test, model_2_preds.squeeze()).numpy()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 48ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","metadata":{"id":"ABtsYBDtr5Zz"},"source":["## Downloading a model (from Google Colab)\n","\n","Say you wanted to get your model from Google Colab to your local machine, you can do one of the following things:\n","* Right click on the file in the files pane and click 'download'.\n","* Use the code below."]},{"cell_type":"code","metadata":{"id":"JV0onjIIr9XC","colab":{"base_uri":"https://localhost:8080/","height":17},"outputId":"96827c1d-68a4-4823-bccb-c9f8b7299c25"},"source":["# Download the model (or any file) from Google Colab\n","from google.colab import files\n","files.download(\"best_model_HDF5_format.h5\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_70fb08d7-6b9f-455b-8282-a93170225ab0\", \"best_model_HDF5_format.h5\", 21952)"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"7xpVdMtKw6X4"},"source":["## A larger example\n","\n","Alright, we've seen the fundamentals of building neural network regression models in TensorFlow.\n","\n","Let's step it up a notch and build a model for a more feature rich dataset.\n","\n","More specifically we're going to try predict the cost of medical insurance for individuals based on a number of different parameters such as, `age`, `sex`, `bmi`, `children`, `smoking_status` and `residential_region`.\n","\n","To do, we'll leverage the pubically available [Medical Cost dataset](https://www.kaggle.com/mirichoi0218/insurance) available from Kaggle and [hosted on GitHub](https://github.com/stedy/Machine-Learning-with-R-datasets/blob/master/insurance.csv).\n","\n","> ðŸ”‘ **Note:** When learning machine learning paradigms, you'll often go through a series of foundational techniques and then practice them by working with open-source datasets and examples. Just as we're doing now, learn foundations, put them to work with different problems. Every time you work on something new, it's a good idea to search for something like \"problem X example with Python/TensorFlow\" where you substitute X for your problem."]},{"cell_type":"code","metadata":{"id":"WWK1LBxapgc2"},"source":["# Import required libraries\n","import tensorflow as tf\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JrnTr5N9blFo"},"source":["# Read in the insurance dataset\n","insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QtXPN7cfb4Nm","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"68eb5a00-f480-48fb-ab5f-adbc9d256fd7"},"source":["# Check out the insurance dataset\n","insurance.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-8585ff66-bf6f-4b20-864e-d12a2b13f9fc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8585ff66-bf6f-4b20-864e-d12a2b13f9fc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8585ff66-bf6f-4b20-864e-d12a2b13f9fc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8585ff66-bf6f-4b20-864e-d12a2b13f9fc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","metadata":{"id":"s55oIsYv0KkZ"},"source":["We're going to have to turn the non-numerical columns into numbers (because a neural network can't handle non-numerical inputs).\n","\n","To do so, we'll use the [`get_dummies()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html) method in pandas.\n","\n","It converts categorical variables (like the `sex`, `smoker` and `region` columns) into numerical variables using one-hot encoding."]},{"cell_type":"code","metadata":{"id":"MqM_BmPkdon8"},"source":["# Turn all categories into numbers\n","insurance_one_hot = pd.get_dummies(insurance)\n","insurance_one_hot.head() # view the converted columns"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zOHoPzgqgZPq"},"source":["Now we'll split data into features (`X`) and labels (`y`)."]},{"cell_type":"code","metadata":{"id":"W_EGj3FxhkAb"},"source":["# Create X & y values\n","X = insurance_one_hot.drop(\"charges\", axis=1)\n","y = insurance_one_hot[\"charges\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-QQFJmDn5ATV"},"source":["# View features\n","X.head()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kudhkM-0giS1"},"source":["And create training and test sets. We could do this manually, but to make it easier, we'll leverage the already available [`train_test_split`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) function available from Scikit-Learn."]},{"cell_type":"code","metadata":{"id":"WPGZGk0jhxCZ"},"source":["# Create training and test sets\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, \n","                                                    y, \n","                                                    test_size=0.2, \n","                                                    random_state=42) # set random state for reproducible splits"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"W8wEC0FPglnN"},"source":["Now we can build and fit a model (we'll make it the same as `model_2`)."]},{"cell_type":"code","metadata":{"id":"OCXTmz6oh_T6"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Create a new model (same as model_2)\n","insurance_model = tf.keras.Sequential([\n","  tf.keras.layers.Dense(1),\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","insurance_model.compile(loss=tf.keras.losses.mae,\n","                        optimizer=tf.keras.optimizers.SGD(),\n","                        metrics=['mae'])\n","\n","# Fit the model\n","insurance_model.fit(X_train, y_train, epochs=100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B1U7LqpKid0r","colab":{"base_uri":"https://localhost:8080/"},"outputId":"bb258865-ef03-43ef-a6d2-2cc1fa700008"},"source":["# Check the results of the insurance model\n","insurance_model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 6392.2939 - mae: 6392.2939\n"]},{"output_type":"execute_result","data":{"text/plain":["[6392.2939453125, 6392.2939453125]"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","insurance_model =tf.keras.Sequential([\n","    tf.keras.layers.Dense(1),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","insurance_model.compile(loss= tf.keras.losses.mae,\n","                        optimizer= tf.keras.optimizers.SGD(),\n","                        metrics= [\"mae\"])\n","insurance_model.fit(X_train, y_train, epochs= 100)"],"metadata":{"id":"YQFBtDitXdbu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H9doNDToqDru"},"source":["Our model didn't perform very well, let's try a bigger model.\n","\n","We'll try 3 things:\n","- Increasing the number of layers (2 -> 3).\n","- Increasing the number of units in each layer (except for the output layer).\n","- Changing the optimizer (from SGD to Adam).\n","\n","Everything else will stay the same."]},{"cell_type":"code","metadata":{"id":"W59EqfqYimnR"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Add an extra layer and increase number of units\n","insurance_model_2 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100), # 100 units\n","  tf.keras.layers.Dense(10), # 10 units\n","  tf.keras.layers.Dense(1) # 1 unit (important for output layer)\n","])\n","\n","# Compile the model\n","insurance_model_2.compile(loss=tf.keras.losses.mae,\n","                          optimizer=tf.keras.optimizers.Adam(), # Adam works but SGD doesn't \n","                          metrics=['mae'])\n","\n","# Fit the model and save the history (we can plot this)\n","history = insurance_model_2.fit(X_train, y_train, epochs=100, verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k9IbYWnOqmoT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8cb7a098-2cfa-45d3-e895-64cd357ce2fc"},"source":["# Evaluate our larger model\n","insurance_model_2.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 2ms/step - loss: 4629.1626 - mae: 4629.1626\n"]},{"output_type":"execute_result","data":{"text/plain":["[4629.16259765625, 4629.16259765625]"]},"metadata":{},"execution_count":74}]},{"cell_type":"markdown","metadata":{"id":"o9Rf3NosqriS"},"source":["Much better! Using a larger model and the Adam optimizer results in almost half the error as the previous model.\n","\n","> ðŸ”‘ **Note:** For many problems, the [Adam optimizer](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) is a great starting choice. See Andrei Karpathy's \"Adam is safe\" point from [*A Recipe for Training Neural Networks*](http://karpathy.github.io/2019/04/25/recipe/) for more. \n","\n","Let's check out the loss curves of our model, we should see a downward trend."]},{"cell_type":"code","metadata":{"id":"9SE55ANojcF_","colab":{"base_uri":"https://localhost:8080/","height":449},"outputId":"32614b87-7035-4f17-bb88-4262ab07780f","executionInfo":{"status":"ok","timestamp":1685365234812,"user_tz":-540,"elapsed":1617,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Plot history (also known as a loss curve)\n","pd.DataFrame(history.history).plot()\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epochs\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"ckHqtn0srQ5q"},"source":["From this, it looks like our model's loss (and MAE) were both still decreasing (in our case, MAE and loss are the same, hence the lines in the plot overlap eachother).\n","\n","What this tells us is the loss might go down if we try training it for longer.\n","\n","> ðŸ¤” **Question:** How long should you train for? \n","\n","> It depends on what problem you're working on. Sometimes training won't take very long, other times it'll take longer than you expect. A common method is to set your model training for a very long time (e.g. 1000's of epochs) but set it up with an [EarlyStopping callback](https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping) so it stops automatically when it stops improving. We'll see this in another module.\n","\n","Let's train the same model as above for a little longer. We can do this but calling fit on it again."]},{"cell_type":"code","metadata":{"id":"Ucs62jV8jl6N"},"source":["# Try training for a little longer (100 more epochs)\n","history_2 = insurance_model_2.fit(X_train, y_train, epochs=100, verbose=0)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L2FZA1z1sxxs"},"source":["How did the extra training go?"]},{"cell_type":"code","metadata":{"id":"cxtiYB3qs0PZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"35121d6a-4caf-4f81-80a8-9b300cc5b2c7"},"source":["# Evaluate the model trained for 200 total epochs\n","insurance_model_2_loss, insurance_model_2_mae = insurance_model_2.evaluate(X_test, y_test)\n","insurance_model_2_loss, insurance_model_2_mae"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 3483.4031 - mae: 3483.4031\n"]},{"output_type":"execute_result","data":{"text/plain":["(3483.403076171875, 3483.403076171875)"]},"metadata":{},"execution_count":77}]},{"cell_type":"markdown","metadata":{"id":"MzUySYEOs-O_"},"source":["Boom! Training for an extra 100 epochs we see about a 10% decrease in error.\n","\n","How does the visual look?"]},{"cell_type":"code","metadata":{"id":"BtYKSLeQjuzL","colab":{"base_uri":"https://localhost:8080/","height":449},"outputId":"07b798f0-a754-45e3-fcbc-1990d87ca87a","executionInfo":{"status":"ok","timestamp":1685365436415,"user_tz":-540,"elapsed":454,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Plot the model trained for 200 total epochs loss curves\n","pd.DataFrame(history_2.history).plot()\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epochs\"); # note: epochs will only show 100 since we overrid the history variable"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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+Tufv9+mXyHau3cvUVFRdOrUiaSkJLKysgBIS0ujurqakSNHesZ2796dmJgYUlJSAEhJSaF3796eMgQwevRonE4nO3bs8Iz5/j5Ojzm9j7OprKzE6XTWWuqTxcuLQ44BADh3fV6vnyUiIiJnMrUQDR48mEWLFrFixQoWLFjAwYMHufzyyykuLiY3NxcfHx9CQkJqvSciIoLc3FwAcnNza5Wh09tPb/upMU6n80dv+jRnzhyCg4M9S3R0dF0c7k8yOg4DoNWxb+r9s0RERKQ2UwvR2LFj+fWvf01CQgKjR4/mk08+obCwkHfffdfMWMyaNYuioiLPkp2dXe+f2X7AGAA6V2VS4iyo988TERGR/zL9K7PvCwkJoWvXruzbt4/IyEiqqqooLCysNebYsWNERkYCEBkZecavzk6//rkxDocDPz+/s+aw2+04HI5aS31r26EbRywReFtc7N+UXO+fJyIiIv/VqApRSUkJ+/fvp23btgwYMABvb29WrVrl2Z6ZmUlWVhaJiYkAJCYmkpGRQV5enmdMcnIyDofDc9+DxMTEWvs4Peb0PhqTI60GAVCeudrkJCIiIi2LqYXod7/7HWvXruXbb79l/fr1XH/99VitVm6++WaCg4OZPHkyDz30EF988QVpaWncfvvtJCYmMmTIEABGjRpFfHw8EydOZOvWraxcuZLf//73TJkyBbvdDsC9997LgQMHeOSRR9i9ezf/+Mc/ePfdd5k+fbqZh35WXp2vAKDNiQ0/M1JERETqkqmF6PDhw9x8881069aNG2+8kbCwML755hvatGkDwHPPPcc111zDhAkTGDZsGJGRkfz73//2vN9qtbJs2TKsViuJiYnceuut3HbbbTz11FOeMbGxsSxfvpzk5GT69OnDvHnzeO211xg92pznxPyUjqfnEbkOUHD8qMlpREREWg5T70PUVNT3fYi+7+BTCcS6D7F58PP0H3t7vX6WiIiYT/chujjN5j5EUtuxsFPziKr3fWFyEhERkZZDhaiR8etx6iaS7fN1PyIREZGGokLUyMRdMoYqw0o74xhHDuwwO46IiEiLoELUyAQEhbDXfuqWAYc3fWJyGhERkR83fPhw7r//fqZNm0arVq2IiIjg1VdfpbS0lNtvv52goCDi4uL49NNPgVMPeJ08eTKxsbH4+fnRrVs3/v73v5+x39dee40ePXrg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h9WKSPOgQiQiIiItngqRiIiItHgqRCLSJLjdbubMmUNsbCx+fn706dOH999/H/jv11nLly8nISEBX19fhgwZwvbt22vt44MPPqBnz57Y7XY6duzIvHnzam2vrKxk5syZREdHY7fbiYuL4//+7/9qjUlLS2PgwIH4+/szdOhQMjMzPdu2bt3KlVdeSVBQEA6HgwEDBrBp06Z6OiMiUpdUiESkSZgzZw5vvfUWCxcuZMeOHUyfPp1bb72VtWvXesbMmDGDefPmkZqaSps2bfjFL35BdXU1cKrI3Hjjjdx0001kZGQwe/ZsHn/8cRYtWuR5/2233ca//vUv5s+fz65du3j55ZcJDAysleOxxx5j3rx5bNq0CZvNxh133OHZlpSURPv27UlNTSUtLY1HH30Ub2/v+j0xIlI3DBGRRq6iosLw9/c31q9fX2v95MmTjZtvvtn44osvDMBYsmSJZ9vJkycNPz8/45133jEMwzBuueUW4+qrr671/hkzZhjx8fGGYRhGZmamARjJyclnzXD6Mz7//HPPuuXLlxuAUV5ebhiGYQQFBRmLFi26+AMWkQanK0Qi0ujt27ePsrIyrr76agIDAz3LW2+9xf79+z3jEhMTPf8ODQ2lW7du7Nq1C4Bdu3Zx6aWX1trvpZdeyt69e3G5XKSnp2O1Wrniiit+MktCQoLn323btgUgLy8PgIceeog777yTkSNHMnfu3FrZRKRxUyESkUavpKQEgOXLl5Oenu5Zdu7c6ZlHdLH8/PzOadz3vwKzWCzAqflNALNnz2bHjh2MHz+e1atXEx8fz4cfflgn+USkfqkQiUijFx8fj91uJysri7i4uFpLdHS0Z9w333zj+XdBQQF79uyhR48eAPTo0YOvv/661n6//vprunbtitVqpXfv3rjd7lpzki5E165dmT59Op999hk33HADb7zxxkXtT0Qahs3sACIiPycoKIjf/e53TJ8+HbfbzWWXXUZRURFff/01DoeDDh06APDUU08RFhZGREQEjz32GK1bt+a6664D4OGHH+aSSy7h6aef5je/+Q0pKSm8+OKL/OMf/wCgY8eOTJo0iTvuuIP58+fTp08fDh06RF5eHjfeeOPPZiwvL2fGjBn86le/IjY2lsOHD5OamsqECRPq7byISB0yexKTiMi5cLvdxvPPP29069bN8Pb2Ntq0aWOMHj3aWLt2rWfC88cff2z07NnT8PHxMQYNGmRs3bq11j7ef/99Iz4+3vD29jZiYmKMZ599ttb28vJyY/r06Ubbtm0NHx8fIy4uznj99dcNw/jvpOqCggLP+C1bthiAcfDgQaOystK46aabjOjoaMPHx8eIiooypk6d6plwLSKNm8UwDMPkTiYiclHWrFnDlVdeSUFBASEhIWbHEZEmSHOIREREpMVTIRIREZEWT1+ZiYiISIunK0QiIiLS4qkQiYiISIunQiQiIiItngqRiIiItHgqRCIiItLiqRCJiIhIi6dCJCIiIi2eCpGIiIi0eP8fe96IBWz2VxwAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"HS8xYkvIuVZZ"},"source":["## Preprocessing data (normalization and standardization)\n","\n","A common practice when working with neural networks is to make sure all of the data you pass to them is in the range 0 to 1.\n","\n","This practice is called **normalization** (scaling all values from their original range to, e.g. between 0 and 100,000 to be between 0 and 1).\n","\n","There is another process call **standardization** which converts all of your data to unit variance and 0 mean.\n","\n","These two practices are often part of a preprocessing pipeline (a series of functions to prepare your data for use with neural networks).\n","\n","Knowing this, some of the major steps you'll take to preprocess your data for a neural network include:\n","* Turning all of your data to numbers (a neural network can't handle strings).\n","* Making sure your data is in the right shape (verifying input and output shapes).\n","* [**Feature scaling**](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-scaler):\n","    * Normalizing data (making sure all values are between 0 and 1). This is done by subtracting the minimum value then dividing by the maximum value minus the minimum. This is also referred to as min-max scaling.\n","    * Standardization (making sure all values have a mean of 0 and a variance of 1). This is done by subtracting the mean value from the target feature and then dividing it by the standard deviation.\n","    * Which one should you use?\n","      * **With neural networks you'll tend to favour normalization** as they tend to prefer values between 0 and 1 (you'll see this espcially with image processing), however, you'll often find a neural network can perform pretty well with minimal feature scaling.\n","\n","> ðŸ“– **Resource:** For more on preprocessing data, I'd recommend reading the following resources:\n","* [Scikit-Learn's documentation on preprocessing data](https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing-data).\n","* [Scale, Standardize or Normalize with Scikit-Learn by Jeff Hale](https://towardsdatascience.com/scale-standardize-or-normalize-with-scikit-learn-6ccc7d176a02).\n","\n","We've already turned our data into numbers using `get_dummies()`, let's see how we'd normalize it as well."]},{"cell_type":"code","metadata":{"id":"9v7P20A2d7H6"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","\n","# Read in the insurance dataset\n","insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vir8UAIwlUOo","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"e8481873-da05-4f85-a4b9-ec1595ada02a"},"source":["# Check out the data\n","insurance.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-761883eb-d95f-49e2-983b-3353d19b1b53\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-761883eb-d95f-49e2-983b-3353d19b1b53')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-761883eb-d95f-49e2-983b-3353d19b1b53 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-761883eb-d95f-49e2-983b-3353d19b1b53');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":80}]},{"cell_type":"markdown","metadata":{"id":"SHMQiNosg3J3"},"source":["Now, just as before, we need to transform the non-numerical columns into numbers and this time we'll also be normalizing the numerical columns with different ranges (to make sure they're all between 0 and 1).\n","\n","To do this, we're going to use a few classes from Scikit-Learn:\n","* [`make_column_transformer`](https://scikit-learn.org/stable/modules/generated/sklearn.compose.make_column_transformer.html) - build a multi-step data preprocessing function for the folllowing transformations:\n","  * [`MinMaxScaler`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html) - make sure all numerical columns are normalized (between 0 and 1).\n","  * [`OneHotEncoder`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html) - one hot encode the non-numerical columns.\n","\n","Let's see them in action."]},{"cell_type":"code","metadata":{"id":"-x9JwbV0hqWh"},"source":["from sklearn.compose import make_column_transformer\n","from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n","\n","# Create column transformer (this will help us normalize/preprocess our data)\n","ct = make_column_transformer(\n","    (MinMaxScaler(), [\"age\", \"bmi\", \"children\"]), # get all values between 0 and 1\n","    (OneHotEncoder(handle_unknown=\"ignore\"), [\"sex\", \"smoker\", \"region\"])\n",")\n","\n","# Create X & y\n","X = insurance.drop(\"charges\", axis=1)\n","y = insurance[\"charges\"]\n","\n","# Build our train and test sets (use random state to ensure same split as before)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Fit column transformer on the training data only (doing so on test data would result in data leakage)\n","ct.fit(X_train)\n","\n","# Transform training and test data with normalization (MinMaxScalar) and one hot encoding (OneHotEncoder)\n","X_train_normal = ct.transform(X_train)\n","X_test_normal = ct.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Tz58y3nPiBJ-"},"source":["Now we've normalized it and one-hot encoding it, what does our data look like now?"]},{"cell_type":"code","source":["# Non-normalized and non-one-hot encoded data example\n","X_train.loc[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uV7lDln-0WDD","executionInfo":{"status":"ok","timestamp":1685368969183,"user_tz":-540,"elapsed":2,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"07bdf968-4bd3-484b-ef1a-94a7e8e7b073"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                19\n","sex            female\n","bmi              27.9\n","children            0\n","smoker            yes\n","region      southwest\n","Name: 0, dtype: object"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["# Normalized and one-hot encoded example\n","X_train_normal[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SfmH_9Gi0aNU","executionInfo":{"status":"ok","timestamp":1685368981903,"user_tz":-540,"elapsed":2,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"80cca899-6493-48eb-ae31-966c21603612"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.60869565, 0.10734463, 0.4       , 1.        , 0.        ,\n","       1.        , 0.        , 0.        , 1.        , 0.        ,\n","       0.        ])"]},"metadata":{},"execution_count":116}]},{"cell_type":"markdown","metadata":{"id":"9iI4KtfWib44"},"source":["How about the shapes?"]},{"cell_type":"code","metadata":{"id":"SFmxzqrWntj7","colab":{"base_uri":"https://localhost:8080/"},"outputId":"79067366-5d38-4424-c2fc-f4a344df0e72","executionInfo":{"status":"ok","timestamp":1685368996588,"user_tz":-540,"elapsed":373,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"source":["# Notice the normalized/one-hot encoded shape is larger because of the extra columns\n","X_train_normal.shape, X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1070, 11), (1070, 6))"]},"metadata":{},"execution_count":117}]},{"cell_type":"markdown","metadata":{"id":"MST951aYijTS"},"source":["Our data is normalized and numerical, let's model it.\n","\n","We'll use the same model as `insurance_model_2`."]},{"cell_type":"code","metadata":{"id":"TdHnIQqll83Y","colab":{"base_uri":"https://localhost:8080/"},"outputId":"11ea61c0-8ab5-4ca7-ec68-bde1e94e195d"},"source":["# Set random seed\n","tf.random.set_seed(42)\n","\n","# Build the model (3 layers, 100, 10, 1 units)\n","insurance_model_3 = tf.keras.Sequential([\n","  tf.keras.layers.Dense(100),\n","  tf.keras.layers.Dense(10),\n","  tf.keras.layers.Dense(1)\n","])\n","\n","# Compile the model\n","insurance_model_3.compile(loss=tf.keras.losses.mae,\n","                          optimizer=tf.keras.optimizers.Adam(),\n","                          metrics=['mae'])\n","\n","# Fit the model for 200 epochs (same as insurance_model_2)\n","insurance_model_3.fit(X_train_normal, y_train, epochs=200, verbose=0) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f004cd64af0>"]},"metadata":{},"execution_count":85}]},{"cell_type":"markdown","metadata":{"id":"-DjwktO6jW41"},"source":["Let's evaluate the model on normalized test set."]},{"cell_type":"code","metadata":{"id":"sBcXZu9AnZfP","colab":{"base_uri":"https://localhost:8080/"},"outputId":"383dfb1a-ef18-4ad7-c696-41453afb729f"},"source":["# Evaulate 3rd model\n","insurance_model_3_loss, insurance_model_3_mae = insurance_model_3.evaluate(X_test_normal, y_test)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 3171.2595 - mae: 3171.2595\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZlHro290jhtX"},"source":["And finally, let's compare the results from `insurance_model_2` (trained on non-normalized data) and `insurance_model_3` (trained on normalized data)."]},{"cell_type":"code","metadata":{"id":"ybZtnVlNjCJO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"d4713c7f-d84e-4a9f-f1b8-a97f9a457e16"},"source":["# Compare modelling results from non-normalized data and normalized data\n","insurance_model_2_mae, insurance_model_3_mae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3483.403076171875, 3171.259521484375)"]},"metadata":{},"execution_count":87}]},{"cell_type":"markdown","metadata":{"id":"gUttViY4jzi8"},"source":["From this we can see normalizing the data results in 10% less error using the same model than not normalizing the data.\n","\n","This is **one of the main benefits of normalization: faster convergence time** (a fancy way of saying, your model gets to better results faster).\n","\n","`insurance_model_2` may have eventually achieved the same results as `insurance_model_3` if we left it training for longer. \n","\n","Also, the results may change if we were to alter the architectures of the models, e.g. more hidden units per layer or more layers.\n","\n","But since our main goal as neural network practitioners is to decrease the time between experiments, anything that helps us get better results sooner is a plus."]},{"cell_type":"markdown","metadata":{"id":"NhIPO_KqocHP"},"source":["## ðŸ›  Exercises\n","\n","We've a covered a whole lot pretty quickly.\n","\n","So now it's time to have a **play around** with a few things and start to build up your intuition.\n","\n","I emphasise the words play around because that's very important. Try a few things out, run the code and see what happens.\n","\n","1. Create your own regression dataset (or make the one we created in \"Create data to view and fit\" bigger) and build fit a model to it.\n","2. Try building a neural network with 4 Dense layers and fitting it to your own regression dataset, how does it perform?\n","3. Try and improve the results we got on the insurance dataset, some things you might want to try include:\n","  * Building a larger model (how does one with 4 dense layers go?).\n","  * Increasing the number of units in each layer.\n","  * Lookup the documentation of [Adam](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam) and find out what the first parameter is, what happens if you increase it by 10x?\n","  * What happens if you train for longer (say 300 epochs instead of 200)? \n","4. Import the [Boston pricing dataset](https://www.tensorflow.org/api_docs/python/tf/keras/datasets/boston_housing/load_data) from TensorFlow [`tf.keras.datasets`](https://www.tensorflow.org/api_docs/python/tf/keras/datasets) and model it.\n"]},{"cell_type":"code","source":["import tensorflow as tf \n","import tensorflow_datasets as tfds "],"metadata":{"id":"rB-jBPolou9_","executionInfo":{"status":"ok","timestamp":1685416257849,"user_tz":-540,"elapsed":2246,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["import numpy as np \n","import matplotlib.pyplot as plt \n","from sklearn.datasets import make_regression \n","\n","X, y= make_regression(n_samples= 200,\n","                      n_features= 10,\n","                      n_targets= 1)\n","\n","X.shape, y.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o2bDFSbOpGi6","executionInfo":{"status":"ok","timestamp":1685416381965,"user_tz":-540,"elapsed":3,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"5186cd20-e81a-4ae6-e431-9d5eff426d85"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((200, 10), (200,))"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["plt.scatter(X[:, 0], y);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"toUwN13rpgh8","executionInfo":{"status":"ok","timestamp":1685416519370,"user_tz":-540,"elapsed":888,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"b76b9720-48f1-42a0-b99d-d222b5bcf9a6"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model= tf.keras.Sequential([\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model.compile(loss= tf.keras.losses.mae,\n","              optimizer= tf.keras.optimizers.Adam(),\n","              metrics= [\"mae\"])\n","\n","model.fit(X, y, epochs= 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H_AbXhR3pzdZ","executionInfo":{"status":"ok","timestamp":1685416587913,"user_tz":-540,"elapsed":1757,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"273bac4e-baf8-41dc-d33d-5cea5dea7b4b"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","7/7 [==============================] - 1s 5ms/step - loss: 176.8472 - mae: 176.8472\n","Epoch 2/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.8324 - mae: 176.8324\n","Epoch 3/10\n","7/7 [==============================] - 0s 4ms/step - loss: 176.8188 - mae: 176.8188\n","Epoch 4/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.8042 - mae: 176.8042\n","Epoch 5/10\n","7/7 [==============================] - 0s 4ms/step - loss: 176.7901 - mae: 176.7901\n","Epoch 6/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.7769 - mae: 176.7769\n","Epoch 7/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.7629 - mae: 176.7629\n","Epoch 8/10\n","7/7 [==============================] - 0s 4ms/step - loss: 176.7488 - mae: 176.7488\n","Epoch 9/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.7352 - mae: 176.7352\n","Epoch 10/10\n","7/7 [==============================] - 0s 3ms/step - loss: 176.7219 - mae: 176.7219\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f398ab40c10>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# 2.\n","tf.random.set_seed(42)\n","\n","model= tf.keras.Sequential([\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model.compile(loss= tf.keras.losses.mae,\n","              optimizer= tf.keras.optimizers.Adam(),\n","              metrics= [\"mae\"])\n","\n","model.fit(X, y, epochs= 10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rQL4QNVTqJP7","executionInfo":{"status":"ok","timestamp":1685416711762,"user_tz":-540,"elapsed":2559,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"025f4d2a-390d-495b-87e9-893d7269832f"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","7/7 [==============================] - 2s 9ms/step - loss: 176.3481 - mae: 176.3481\n","Epoch 2/10\n","7/7 [==============================] - 0s 5ms/step - loss: 176.1938 - mae: 176.1938\n","Epoch 3/10\n","7/7 [==============================] - 0s 5ms/step - loss: 176.0454 - mae: 176.0454\n","Epoch 4/10\n","7/7 [==============================] - 0s 6ms/step - loss: 175.8794 - mae: 175.8794\n","Epoch 5/10\n","7/7 [==============================] - 0s 5ms/step - loss: 175.7063 - mae: 175.7063\n","Epoch 6/10\n","7/7 [==============================] - 0s 5ms/step - loss: 175.5177 - mae: 175.5177\n","Epoch 7/10\n","7/7 [==============================] - 0s 7ms/step - loss: 175.2922 - mae: 175.2922\n","Epoch 8/10\n","7/7 [==============================] - 0s 5ms/step - loss: 175.0191 - mae: 175.0191\n","Epoch 9/10\n","7/7 [==============================] - 0s 5ms/step - loss: 174.6930 - mae: 174.6930\n","Epoch 10/10\n","7/7 [==============================] - 0s 4ms/step - loss: 174.3259 - mae: 174.3259\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f398a8c2e60>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.2)\n","\n","X_train.shape, y_train.shape, X_test.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXo3RtLTrJbz","executionInfo":{"status":"ok","timestamp":1685416930393,"user_tz":-540,"elapsed":724,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"07fb2690-bf3c-4d0c-8a54-cabffa6a4c50"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((160, 10), (160,), (40, 10), (40,))"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model_1= tf.keras.Sequential([\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(10),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model_1.compile(loss= tf.keras.losses.mae,\n","                optimizer= tf.keras.optimizers.Adam(),\n","                metrics= [\"mae\"])\n","\n","model_1.fit(X_train, y_train, epochs= 100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lh-jOVylrZlQ","executionInfo":{"status":"ok","timestamp":1685417449105,"user_tz":-540,"elapsed":5766,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"0bc1ec6d-4634-4cb4-d327-b9e6bd458211"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","5/5 [==============================] - 3s 7ms/step - loss: 174.3874 - mae: 174.3874\n","Epoch 2/100\n","5/5 [==============================] - 0s 6ms/step - loss: 174.2572 - mae: 174.2572\n","Epoch 3/100\n","5/5 [==============================] - 0s 4ms/step - loss: 174.1318 - mae: 174.1318\n","Epoch 4/100\n","5/5 [==============================] - 0s 4ms/step - loss: 173.9903 - mae: 173.9903\n","Epoch 5/100\n","5/5 [==============================] - 0s 4ms/step - loss: 173.8459 - mae: 173.8459\n","Epoch 6/100\n","5/5 [==============================] - 0s 3ms/step - loss: 173.6807 - mae: 173.6807\n","Epoch 7/100\n","5/5 [==============================] - 0s 4ms/step - loss: 173.4972 - mae: 173.4972\n","Epoch 8/100\n","5/5 [==============================] - 0s 4ms/step - loss: 173.2978 - mae: 173.2978\n","Epoch 9/100\n","5/5 [==============================] - 0s 3ms/step - loss: 173.0784 - mae: 173.0784\n","Epoch 10/100\n","5/5 [==============================] - 0s 3ms/step - loss: 172.8434 - mae: 172.8434\n","Epoch 11/100\n","5/5 [==============================] - 0s 6ms/step - loss: 172.5630 - mae: 172.5630\n","Epoch 12/100\n","5/5 [==============================] - 0s 4ms/step - loss: 172.2492 - mae: 172.2492\n","Epoch 13/100\n","5/5 [==============================] - 0s 4ms/step - loss: 171.9234 - mae: 171.9234\n","Epoch 14/100\n","5/5 [==============================] - 0s 4ms/step - loss: 171.5263 - mae: 171.5263\n","Epoch 15/100\n","5/5 [==============================] - 0s 4ms/step - loss: 171.1015 - mae: 171.1015\n","Epoch 16/100\n","5/5 [==============================] - 0s 3ms/step - loss: 170.6429 - mae: 170.6429\n","Epoch 17/100\n","5/5 [==============================] - 0s 4ms/step - loss: 170.0939 - mae: 170.0939\n","Epoch 18/100\n","5/5 [==============================] - 0s 4ms/step - loss: 169.4964 - mae: 169.4964\n","Epoch 19/100\n","5/5 [==============================] - 0s 3ms/step - loss: 168.8336 - mae: 168.8336\n","Epoch 20/100\n","5/5 [==============================] - 0s 3ms/step - loss: 168.0740 - mae: 168.0740\n","Epoch 21/100\n","5/5 [==============================] - 0s 4ms/step - loss: 167.2212 - mae: 167.2212\n","Epoch 22/100\n","5/5 [==============================] - 0s 4ms/step - loss: 166.2736 - mae: 166.2736\n","Epoch 23/100\n","5/5 [==============================] - 0s 4ms/step - loss: 165.1836 - mae: 165.1836\n","Epoch 24/100\n","5/5 [==============================] - 0s 4ms/step - loss: 163.9706 - mae: 163.9706\n","Epoch 25/100\n","5/5 [==============================] - 0s 3ms/step - loss: 162.6525 - mae: 162.6525\n","Epoch 26/100\n","5/5 [==============================] - 0s 4ms/step - loss: 161.1707 - mae: 161.1707\n","Epoch 27/100\n","5/5 [==============================] - 0s 4ms/step - loss: 159.4131 - mae: 159.4131\n","Epoch 28/100\n","5/5 [==============================] - 0s 3ms/step - loss: 157.6832 - mae: 157.6832\n","Epoch 29/100\n","5/5 [==============================] - 0s 4ms/step - loss: 155.5130 - mae: 155.5130\n","Epoch 30/100\n","5/5 [==============================] - 0s 4ms/step - loss: 153.1597 - mae: 153.1597\n","Epoch 31/100\n","5/5 [==============================] - 0s 4ms/step - loss: 150.6415 - mae: 150.6415\n","Epoch 32/100\n","5/5 [==============================] - 0s 3ms/step - loss: 147.7356 - mae: 147.7356\n","Epoch 33/100\n","5/5 [==============================] - 0s 4ms/step - loss: 144.5697 - mae: 144.5697\n","Epoch 34/100\n","5/5 [==============================] - 0s 4ms/step - loss: 141.1400 - mae: 141.1400\n","Epoch 35/100\n","5/5 [==============================] - 0s 3ms/step - loss: 137.2704 - mae: 137.2704\n","Epoch 36/100\n","5/5 [==============================] - 0s 3ms/step - loss: 133.1228 - mae: 133.1228\n","Epoch 37/100\n","5/5 [==============================] - 0s 4ms/step - loss: 128.4952 - mae: 128.4952\n","Epoch 38/100\n","5/5 [==============================] - 0s 3ms/step - loss: 123.6770 - mae: 123.6770\n","Epoch 39/100\n","5/5 [==============================] - 0s 6ms/step - loss: 118.2631 - mae: 118.2631\n","Epoch 40/100\n","5/5 [==============================] - 0s 4ms/step - loss: 112.9223 - mae: 112.9223\n","Epoch 41/100\n","5/5 [==============================] - 0s 3ms/step - loss: 106.6726 - mae: 106.6726\n","Epoch 42/100\n","5/5 [==============================] - 0s 3ms/step - loss: 100.3544 - mae: 100.3544\n","Epoch 43/100\n","5/5 [==============================] - 0s 5ms/step - loss: 93.3217 - mae: 93.3217\n","Epoch 44/100\n","5/5 [==============================] - 0s 3ms/step - loss: 86.0012 - mae: 86.0012\n","Epoch 45/100\n","5/5 [==============================] - 0s 3ms/step - loss: 78.1364 - mae: 78.1364\n","Epoch 46/100\n","5/5 [==============================] - 0s 4ms/step - loss: 69.9991 - mae: 69.9991\n","Epoch 47/100\n","5/5 [==============================] - 0s 4ms/step - loss: 61.3613 - mae: 61.3613\n","Epoch 48/100\n","5/5 [==============================] - 0s 3ms/step - loss: 53.2085 - mae: 53.2085\n","Epoch 49/100\n","5/5 [==============================] - 0s 3ms/step - loss: 45.7088 - mae: 45.7088\n","Epoch 50/100\n","5/5 [==============================] - 0s 4ms/step - loss: 38.1469 - mae: 38.1469\n","Epoch 51/100\n","5/5 [==============================] - 0s 6ms/step - loss: 32.5492 - mae: 32.5492\n","Epoch 52/100\n","5/5 [==============================] - 0s 4ms/step - loss: 29.0978 - mae: 29.0978\n","Epoch 53/100\n","5/5 [==============================] - 0s 3ms/step - loss: 26.3420 - mae: 26.3420\n","Epoch 54/100\n","5/5 [==============================] - 0s 4ms/step - loss: 23.4120 - mae: 23.4120\n","Epoch 55/100\n","5/5 [==============================] - 0s 4ms/step - loss: 20.4487 - mae: 20.4487\n","Epoch 56/100\n","5/5 [==============================] - 0s 4ms/step - loss: 17.7228 - mae: 17.7228\n","Epoch 57/100\n","5/5 [==============================] - 0s 4ms/step - loss: 15.0757 - mae: 15.0757\n","Epoch 58/100\n","5/5 [==============================] - 0s 4ms/step - loss: 12.7127 - mae: 12.7127\n","Epoch 59/100\n","5/5 [==============================] - 0s 4ms/step - loss: 10.4239 - mae: 10.4239\n","Epoch 60/100\n","5/5 [==============================] - 0s 4ms/step - loss: 7.9995 - mae: 7.9995\n","Epoch 61/100\n","5/5 [==============================] - 0s 4ms/step - loss: 5.9474 - mae: 5.9474\n","Epoch 62/100\n","5/5 [==============================] - 0s 3ms/step - loss: 3.9988 - mae: 3.9988\n","Epoch 63/100\n","5/5 [==============================] - 0s 4ms/step - loss: 2.3270 - mae: 2.3270\n","Epoch 64/100\n","5/5 [==============================] - 0s 3ms/step - loss: 1.4425 - mae: 1.4425\n","Epoch 65/100\n","5/5 [==============================] - 0s 5ms/step - loss: 0.8174 - mae: 0.8174\n","Epoch 66/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.9743 - mae: 0.9743\n","Epoch 67/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.7411 - mae: 0.7411\n","Epoch 68/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.3202 - mae: 0.3202\n","Epoch 69/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.4640 - mae: 0.4640\n","Epoch 70/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.2465 - mae: 0.2465\n","Epoch 71/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.3418 - mae: 0.3418\n","Epoch 72/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.3014 - mae: 0.3014\n","Epoch 73/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.3058 - mae: 0.3058\n","Epoch 74/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.3018 - mae: 0.3018\n","Epoch 75/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.2753 - mae: 0.2753\n","Epoch 76/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1865 - mae: 0.1865\n","Epoch 77/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1893 - mae: 0.1893\n","Epoch 78/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1936 - mae: 0.1936\n","Epoch 79/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1550 - mae: 0.1550\n","Epoch 80/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1415 - mae: 0.1415\n","Epoch 81/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.2066 - mae: 0.2066\n","Epoch 82/100\n","5/5 [==============================] - 0s 5ms/step - loss: 0.2384 - mae: 0.2384\n","Epoch 83/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.2482 - mae: 0.2482\n","Epoch 84/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.2051 - mae: 0.2051\n","Epoch 85/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.2136 - mae: 0.2136\n","Epoch 86/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.2122 - mae: 0.2122\n","Epoch 87/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1582 - mae: 0.1582\n","Epoch 88/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1289 - mae: 0.1289\n","Epoch 89/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1384 - mae: 0.1384\n","Epoch 90/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.1852 - mae: 0.1852\n","Epoch 91/100\n","5/5 [==============================] - 0s 3ms/step - loss: 0.2601 - mae: 0.2601\n","Epoch 92/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.2816 - mae: 0.2816\n","Epoch 93/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1746 - mae: 0.1746\n","Epoch 94/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1752 - mae: 0.1752\n","Epoch 95/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1567 - mae: 0.1567\n","Epoch 96/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1720 - mae: 0.1720\n","Epoch 97/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1650 - mae: 0.1650\n","Epoch 98/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1633 - mae: 0.1633\n","Epoch 99/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1330 - mae: 0.1330\n","Epoch 100/100\n","5/5 [==============================] - 0s 4ms/step - loss: 0.1452 - mae: 0.1452\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f398a221990>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["model_1.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3a-8XeotZJO","executionInfo":{"status":"ok","timestamp":1685417479016,"user_tz":-540,"elapsed":480,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"c2aaac0d-ad20-495c-f765-7c0c91b18b6b"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 12ms/step - loss: 0.1765 - mae: 0.1765\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.17653843760490417, 0.17653843760490417]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["y_preds_1= model_1.predict(X_test)\n","y_preds_1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VAv-XyoNteZ-","executionInfo":{"status":"ok","timestamp":1685417501738,"user_tz":-540,"elapsed":541,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"1dad6cf6-3461-4f77-ea6f-c2781af57023"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["2/2 [==============================] - 0s 6ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[ 306.2065   ],\n","       [-181.89615  ],\n","       [  39.92226  ],\n","       [-149.68396  ],\n","       [ -52.951607 ],\n","       [ 176.43521  ],\n","       [ 104.44211  ],\n","       [ 184.57721  ],\n","       [ 302.11862  ],\n","       [ 736.39905  ],\n","       [-144.72403  ],\n","       [-365.68182  ],\n","       [   8.992328 ],\n","       [ -53.40615  ],\n","       [ -42.020916 ],\n","       [ 401.88406  ],\n","       [ 326.69907  ],\n","       [ -14.0178175],\n","       [-126.190155 ],\n","       [-243.68811  ],\n","       [ 308.1187   ],\n","       [  91.61283  ],\n","       [ 139.38402  ],\n","       [-140.00293  ],\n","       [ -73.13808  ],\n","       [-249.91269  ],\n","       [   4.8885956],\n","       [ 430.59143  ],\n","       [ 116.96253  ],\n","       [-190.18626  ],\n","       [  -5.3784213],\n","       [ 309.03918  ],\n","       [ 141.79984  ],\n","       [  23.79695  ],\n","       [ 218.36778  ],\n","       [-122.3671   ],\n","       [ 360.95197  ],\n","       [ 244.8639   ],\n","       [  20.006855 ],\n","       [-202.70644  ]], dtype=float32)"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["def plot_predictions(train_data,\n","                     train_labels,\n","                     test_data,\n","                     test_labels,\n","                     predictions):\n","  \"\"\"\n","  Plots training data, test data and compares predictions.\n","  \"\"\"\n","  plt.figure(figsize= (10, 7))\n","  plt.scatter(train_data, train_labels, c= \"b\", label= \"Training data\")\n","  plt.scatter(test_data, test_labels, c= \"g\", label= \"Testing data\")\n","  plt.scatter(test_data, predictions, c= \"r\", label= \"Predictions\")\n","  plt.legend();"],"metadata":{"id":"MiXUEO4RtlOW","executionInfo":{"status":"ok","timestamp":1685417624805,"user_tz":-540,"elapsed":1,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["plot_predictions(X_train[:,0], y_train,\n","                 X_test[:,0], y_test, y_preds_1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":619},"id":"nXj8k2SJuIWL","executionInfo":{"status":"ok","timestamp":1685417702010,"user_tz":-540,"elapsed":596,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"a27ff27e-2beb-4e90-f520-2d56e2737556"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model_1.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KOPa_WVOu6EA","executionInfo":{"status":"ok","timestamp":1685417869081,"user_tz":-540,"elapsed":5,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"3fa54e4e-2351-4155-9484-3ce3c5274f92"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_22 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_23 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_24 (Dense)            (None, 10)                110       \n","                                                                 \n"," dense_25 (Dense)            (None, 1)                 11        \n","                                                                 \n","=================================================================\n","Total params: 341\n","Trainable params: 341\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["# 3.\n","import pandas as pd\n","import numpy as np\n","\n","data= pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")\n","\n","data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fdg41rF1vCNJ","executionInfo":{"status":"ok","timestamp":1685418138407,"user_tz":-540,"elapsed":891,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"5985bce0-ee5a-44d5-fccb-ed14e70d8173"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1338, 7)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"EDQOcPVfwAPp","executionInfo":{"status":"ok","timestamp":1685418153968,"user_tz":-540,"elapsed":6,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"f359c92d-b5c8-4ca1-cf18-c8eb7f138eb4"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     sex     bmi  children smoker     region      charges\n","0   19  female  27.900         0    yes  southwest  16884.92400\n","1   18    male  33.770         1     no  southeast   1725.55230\n","2   28    male  33.000         3     no  southeast   4449.46200\n","3   33    male  22.705         0     no  northwest  21984.47061\n","4   32    male  28.880         0     no  northwest   3866.85520"],"text/html":["\n","  <div id=\"df-c00090bb-7c36-4954-91f0-2212e04bc1cd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>smoker</th>\n","      <th>region</th>\n","      <th>charges</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>female</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>yes</td>\n","      <td>southwest</td>\n","      <td>16884.92400</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>male</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>1725.55230</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>male</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>no</td>\n","      <td>southeast</td>\n","      <td>4449.46200</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>male</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>21984.47061</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>male</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>no</td>\n","      <td>northwest</td>\n","      <td>3866.85520</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c00090bb-7c36-4954-91f0-2212e04bc1cd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c00090bb-7c36-4954-91f0-2212e04bc1cd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c00090bb-7c36-4954-91f0-2212e04bc1cd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["data_one_hot= pd.get_dummies(data)\n","data_one_hot.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"kWIOVyAHwEZ5","executionInfo":{"status":"ok","timestamp":1685418179874,"user_tz":-540,"elapsed":414,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"ac6f2870-7c60-4611-e653-1af12828107b"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age     bmi  children      charges  sex_female  sex_male  smoker_no  \\\n","0   19  27.900         0  16884.92400           1         0          0   \n","1   18  33.770         1   1725.55230           0         1          1   \n","2   28  33.000         3   4449.46200           0         1          1   \n","3   33  22.705         0  21984.47061           0         1          1   \n","4   32  28.880         0   3866.85520           0         1          1   \n","\n","   smoker_yes  region_northeast  region_northwest  region_southeast  \\\n","0           1                 0                 0                 0   \n","1           0                 0                 0                 1   \n","2           0                 0                 0                 1   \n","3           0                 0                 1                 0   \n","4           0                 0                 1                 0   \n","\n","   region_southwest  \n","0                 1  \n","1                 0  \n","2                 0  \n","3                 0  \n","4                 0  "],"text/html":["\n","  <div id=\"df-4524a205-96e4-412d-a22b-591a14dc44db\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>bmi</th>\n","      <th>children</th>\n","      <th>charges</th>\n","      <th>sex_female</th>\n","      <th>sex_male</th>\n","      <th>smoker_no</th>\n","      <th>smoker_yes</th>\n","      <th>region_northeast</th>\n","      <th>region_northwest</th>\n","      <th>region_southeast</th>\n","      <th>region_southwest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>19</td>\n","      <td>27.900</td>\n","      <td>0</td>\n","      <td>16884.92400</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>18</td>\n","      <td>33.770</td>\n","      <td>1</td>\n","      <td>1725.55230</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>28</td>\n","      <td>33.000</td>\n","      <td>3</td>\n","      <td>4449.46200</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>33</td>\n","      <td>22.705</td>\n","      <td>0</td>\n","      <td>21984.47061</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>28.880</td>\n","      <td>0</td>\n","      <td>3866.85520</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4524a205-96e4-412d-a22b-591a14dc44db')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4524a205-96e4-412d-a22b-591a14dc44db button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4524a205-96e4-412d-a22b-591a14dc44db');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["X= data_one_hot.drop(\"charges\", axis= 1)\n","y= data_one_hot[\"charges\"]\n","\n","X.shape, y.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bfnp729gwOBH","executionInfo":{"status":"ok","timestamp":1685418232309,"user_tz":-540,"elapsed":2,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"0a8dbd3a-e311-4de1-fe7c-74e0907f656d"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1338, 11), (1338,))"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test= train_test_split(X, y, test_size= 0.2, random_state= 42)\n","X_train.shape, y_train.shape, X_test.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PcioDkHWwdWD","executionInfo":{"status":"ok","timestamp":1685418302654,"user_tz":-540,"elapsed":312,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"383bbf50-a8d2-4f9b-b722-e91727d4fec2"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1070, 11), (1070,), (268, 11), (268,))"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model_2= tf.keras.Sequential([\n","    tf.keras.layers.Dense(300),\n","    tf.keras.layers.Dense(200),\n","    tf.keras.layers.Dense(100),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model_2.compile(loss= tf.keras.losses.mae,\n","              optimizer= tf.keras.optimizers.Adam(),\n","              metrics= [\"mae\"])\n","\n","history_2= model_2.fit(X_train, y_train, epochs= 100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YaHDKJd4wrqD","executionInfo":{"status":"ok","timestamp":1685418973849,"user_tz":-540,"elapsed":26810,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"84154156-fef8-49b1-bafd-a0f72bbe5a1b"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","34/34 [==============================] - 1s 4ms/step - loss: 11567.2324 - mae: 11567.2324\n","Epoch 2/100\n","34/34 [==============================] - 0s 5ms/step - loss: 7469.4375 - mae: 7469.4375\n","Epoch 3/100\n","34/34 [==============================] - 0s 4ms/step - loss: 7212.0020 - mae: 7212.0020\n","Epoch 4/100\n","34/34 [==============================] - 0s 4ms/step - loss: 7000.3896 - mae: 7000.3896\n","Epoch 5/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6812.5610 - mae: 6812.5610\n","Epoch 6/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6632.8052 - mae: 6632.8052\n","Epoch 7/100\n","34/34 [==============================] - 0s 5ms/step - loss: 6592.8267 - mae: 6592.8267\n","Epoch 8/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6501.4204 - mae: 6501.4204\n","Epoch 9/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6439.1641 - mae: 6439.1641\n","Epoch 10/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6346.7061 - mae: 6346.7061\n","Epoch 11/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6292.7241 - mae: 6292.7241\n","Epoch 12/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6186.6978 - mae: 6186.6978\n","Epoch 13/100\n","34/34 [==============================] - 0s 4ms/step - loss: 6013.1372 - mae: 6013.1372\n","Epoch 14/100\n","34/34 [==============================] - 0s 6ms/step - loss: 5778.6953 - mae: 5778.6953\n","Epoch 15/100\n","34/34 [==============================] - 0s 7ms/step - loss: 5460.4717 - mae: 5460.4717\n","Epoch 16/100\n","34/34 [==============================] - 0s 7ms/step - loss: 4912.4033 - mae: 4912.4033\n","Epoch 17/100\n","34/34 [==============================] - 0s 11ms/step - loss: 4201.0986 - mae: 4201.0986\n","Epoch 18/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3876.2456 - mae: 3876.2456\n","Epoch 19/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3891.4260 - mae: 3891.4260\n","Epoch 20/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3882.4851 - mae: 3882.4851\n","Epoch 21/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3838.6221 - mae: 3838.6221\n","Epoch 22/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3843.5679 - mae: 3843.5679\n","Epoch 23/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3798.8513 - mae: 3798.8513\n","Epoch 24/100\n","34/34 [==============================] - 0s 13ms/step - loss: 3799.5227 - mae: 3799.5227\n","Epoch 25/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3786.1582 - mae: 3786.1582\n","Epoch 26/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3751.4795 - mae: 3751.4795\n","Epoch 27/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3751.3760 - mae: 3751.3760\n","Epoch 28/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3777.4780 - mae: 3777.4780\n","Epoch 29/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3771.6506 - mae: 3771.6506\n","Epoch 30/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3803.9263 - mae: 3803.9263\n","Epoch 31/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3733.9500 - mae: 3733.9500\n","Epoch 32/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3702.6689 - mae: 3702.6689\n","Epoch 33/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3713.1147 - mae: 3713.1147\n","Epoch 34/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3822.0085 - mae: 3822.0085\n","Epoch 35/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3656.6553 - mae: 3656.6553\n","Epoch 36/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3660.9736 - mae: 3660.9736\n","Epoch 37/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3637.7522 - mae: 3637.7522\n","Epoch 38/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3614.1780 - mae: 3614.1780\n","Epoch 39/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3656.4951 - mae: 3656.4951\n","Epoch 40/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3648.6489 - mae: 3648.6489\n","Epoch 41/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3780.4304 - mae: 3780.4304\n","Epoch 42/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3644.2437 - mae: 3644.2437\n","Epoch 43/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3616.2502 - mae: 3616.2502\n","Epoch 44/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3633.4421 - mae: 3633.4421\n","Epoch 45/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3665.4233 - mae: 3665.4233\n","Epoch 46/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3559.0779 - mae: 3559.0779\n","Epoch 47/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3583.7271 - mae: 3583.7271\n","Epoch 48/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3642.4041 - mae: 3642.4041\n","Epoch 49/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3625.2615 - mae: 3625.2615\n","Epoch 50/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3552.6248 - mae: 3552.6248\n","Epoch 51/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3534.4038 - mae: 3534.4038\n","Epoch 52/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3519.6833 - mae: 3519.6833\n","Epoch 53/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3545.7976 - mae: 3545.7976\n","Epoch 54/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3570.5171 - mae: 3570.5171\n","Epoch 55/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3557.2886 - mae: 3557.2886\n","Epoch 56/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3523.9292 - mae: 3523.9292\n","Epoch 57/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3522.9385 - mae: 3522.9385\n","Epoch 58/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3654.0056 - mae: 3654.0056\n","Epoch 59/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3534.0371 - mae: 3534.0371\n","Epoch 60/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3547.8728 - mae: 3547.8728\n","Epoch 61/100\n","34/34 [==============================] - 1s 19ms/step - loss: 3534.3953 - mae: 3534.3953\n","Epoch 62/100\n","34/34 [==============================] - 1s 19ms/step - loss: 3563.8936 - mae: 3563.8936\n","Epoch 63/100\n","34/34 [==============================] - 1s 20ms/step - loss: 3524.6526 - mae: 3524.6526\n","Epoch 64/100\n","34/34 [==============================] - 1s 19ms/step - loss: 3501.1658 - mae: 3501.1658\n","Epoch 65/100\n","34/34 [==============================] - 1s 17ms/step - loss: 3504.9695 - mae: 3504.9695\n","Epoch 66/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3637.5007 - mae: 3637.5007\n","Epoch 67/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3543.1912 - mae: 3543.1912\n","Epoch 68/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3548.7256 - mae: 3548.7256\n","Epoch 69/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3529.7590 - mae: 3529.7590\n","Epoch 70/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3520.2092 - mae: 3520.2092\n","Epoch 71/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3514.9651 - mae: 3514.9651\n","Epoch 72/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3576.4175 - mae: 3576.4175\n","Epoch 73/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3511.8333 - mae: 3511.8333\n","Epoch 74/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3518.8281 - mae: 3518.8281\n","Epoch 75/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3513.8125 - mae: 3513.8125\n","Epoch 76/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3541.0735 - mae: 3541.0735\n","Epoch 77/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3635.7312 - mae: 3635.7312\n","Epoch 78/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3549.0984 - mae: 3549.0984\n","Epoch 79/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3543.6130 - mae: 3543.6130\n","Epoch 80/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.1675 - mae: 3522.1675\n","Epoch 81/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3549.2769 - mae: 3549.2769\n","Epoch 82/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3606.7034 - mae: 3606.7034\n","Epoch 83/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3544.9890 - mae: 3544.9890\n","Epoch 84/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3501.9465 - mae: 3501.9465\n","Epoch 85/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3509.7351 - mae: 3509.7351\n","Epoch 86/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3504.9575 - mae: 3504.9575\n","Epoch 87/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3558.7139 - mae: 3558.7139\n","Epoch 88/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3595.5879 - mae: 3595.5879\n","Epoch 89/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3541.4485 - mae: 3541.4485\n","Epoch 90/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3516.6135 - mae: 3516.6135\n","Epoch 91/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.9846 - mae: 3522.9846\n","Epoch 92/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3552.1887 - mae: 3552.1887\n","Epoch 93/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3586.3289 - mae: 3586.3289\n","Epoch 94/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3614.5286 - mae: 3614.5286\n","Epoch 95/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3573.0574 - mae: 3573.0574\n","Epoch 96/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3566.2244 - mae: 3566.2244\n","Epoch 97/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3600.4478 - mae: 3600.4478\n","Epoch 98/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3533.0808 - mae: 3533.0808\n","Epoch 99/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3506.8740 - mae: 3506.8740\n","Epoch 100/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3521.0278 - mae: 3521.0278\n"]}]},{"cell_type":"code","source":["model_2.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J4idQ2NiyTzL","executionInfo":{"status":"ok","timestamp":1685418977107,"user_tz":-540,"elapsed":274,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"ba66cfbc-00bd-49e1-ad46-ed31bb7cfe0f"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 3230.9878 - mae: 3230.9878\n"]},{"output_type":"execute_result","data":{"text/plain":["[3230.98779296875, 3230.98779296875]"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["pd.DataFrame(history_2.history).plot()\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Epochs\");"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"s6yaRS9Eyfo0","executionInfo":{"status":"ok","timestamp":1685418997690,"user_tz":-540,"elapsed":1502,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"32891ec8-1626-4a41-f195-ecec7dc17ca5"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model_3= tf.keras.Sequential([\n","    tf.keras.layers.Dense(300),\n","    tf.keras.layers.Dense(200),\n","    tf.keras.layers.Dense(100),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model_3.compile(loss= tf.keras.losses.mae,\n","                optimizer= tf.keras.optimizers.Adam(learning_rate= 0.001 * 10), ## \n","                metrics= [\"mae\"])\n","\n","history_3= model_3.fit(X_train, y_train, epochs= 100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kNc3AAiTxVhP","executionInfo":{"status":"ok","timestamp":1685419038948,"user_tz":-540,"elapsed":30173,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"db2deff3-3dd6-4b3c-a98f-6ec1bd4fe9e3"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","34/34 [==============================] - 2s 5ms/step - loss: 8245.4365 - mae: 8245.4365\n","Epoch 2/100\n","34/34 [==============================] - 0s 5ms/step - loss: 6661.2881 - mae: 6661.2881\n","Epoch 3/100\n","34/34 [==============================] - 0s 4ms/step - loss: 5743.8594 - mae: 5743.8594\n","Epoch 4/100\n","34/34 [==============================] - 0s 5ms/step - loss: 4416.8154 - mae: 4416.8154\n","Epoch 5/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3943.4785 - mae: 3943.4785\n","Epoch 6/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3950.7971 - mae: 3950.7971\n","Epoch 7/100\n","34/34 [==============================] - 0s 12ms/step - loss: 4142.6147 - mae: 4142.6147\n","Epoch 8/100\n","34/34 [==============================] - 0s 10ms/step - loss: 4167.2065 - mae: 4167.2065\n","Epoch 9/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3884.1511 - mae: 3884.1511\n","Epoch 10/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3841.3403 - mae: 3841.3403\n","Epoch 11/100\n","34/34 [==============================] - 0s 9ms/step - loss: 4029.3809 - mae: 4029.3809\n","Epoch 12/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3857.0840 - mae: 3857.0840\n","Epoch 13/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3874.0535 - mae: 3874.0535\n","Epoch 14/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3850.2507 - mae: 3850.2507\n","Epoch 15/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3904.7065 - mae: 3904.7065\n","Epoch 16/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3705.9353 - mae: 3705.9353\n","Epoch 17/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3955.1917 - mae: 3955.1917\n","Epoch 18/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3955.7981 - mae: 3955.7981\n","Epoch 19/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3873.8005 - mae: 3873.8005\n","Epoch 20/100\n","34/34 [==============================] - 0s 12ms/step - loss: 3894.5276 - mae: 3894.5276\n","Epoch 21/100\n","34/34 [==============================] - 0s 8ms/step - loss: 4121.4673 - mae: 4121.4673\n","Epoch 22/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3665.6902 - mae: 3665.6902\n","Epoch 23/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3992.4304 - mae: 3992.4304\n","Epoch 24/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3728.9863 - mae: 3728.9863\n","Epoch 25/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3837.4146 - mae: 3837.4146\n","Epoch 26/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3706.7678 - mae: 3706.7678\n","Epoch 27/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3694.4082 - mae: 3694.4082\n","Epoch 28/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3689.0442 - mae: 3689.0442\n","Epoch 29/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3718.1301 - mae: 3718.1301\n","Epoch 30/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3826.5625 - mae: 3826.5625\n","Epoch 31/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3862.8059 - mae: 3862.8059\n","Epoch 32/100\n","34/34 [==============================] - 0s 5ms/step - loss: 4192.1602 - mae: 4192.1602\n","Epoch 33/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3984.5239 - mae: 3984.5239\n","Epoch 34/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3714.7173 - mae: 3714.7173\n","Epoch 35/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3656.8235 - mae: 3656.8235\n","Epoch 36/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3712.5713 - mae: 3712.5713\n","Epoch 37/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3778.9243 - mae: 3778.9243\n","Epoch 38/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3953.0042 - mae: 3953.0042\n","Epoch 39/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3682.3323 - mae: 3682.3323\n","Epoch 40/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3712.3730 - mae: 3712.3730\n","Epoch 41/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3782.2598 - mae: 3782.2598\n","Epoch 42/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3803.0715 - mae: 3803.0715\n","Epoch 43/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3649.9077 - mae: 3649.9077\n","Epoch 44/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3621.4585 - mae: 3621.4585\n","Epoch 45/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3672.2039 - mae: 3672.2039\n","Epoch 46/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3816.6941 - mae: 3816.6941\n","Epoch 47/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3853.7253 - mae: 3853.7253\n","Epoch 48/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3753.8447 - mae: 3753.8447\n","Epoch 49/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3805.5232 - mae: 3805.5232\n","Epoch 50/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3672.7656 - mae: 3672.7656\n","Epoch 51/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3653.9080 - mae: 3653.9080\n","Epoch 52/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3685.7109 - mae: 3685.7109\n","Epoch 53/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3665.8730 - mae: 3665.8730\n","Epoch 54/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3674.9321 - mae: 3674.9321\n","Epoch 55/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3923.8767 - mae: 3923.8767\n","Epoch 56/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3710.5374 - mae: 3710.5374\n","Epoch 57/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3667.1819 - mae: 3667.1819\n","Epoch 58/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3745.8987 - mae: 3745.8987\n","Epoch 59/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3612.3843 - mae: 3612.3843\n","Epoch 60/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3866.9993 - mae: 3866.9993\n","Epoch 61/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3819.6111 - mae: 3819.6111\n","Epoch 62/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3923.9116 - mae: 3923.9116\n","Epoch 63/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3695.3086 - mae: 3695.3086\n","Epoch 64/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3599.3855 - mae: 3599.3855\n","Epoch 65/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3584.9219 - mae: 3584.9219\n","Epoch 66/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3709.7014 - mae: 3709.7014\n","Epoch 67/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3709.7231 - mae: 3709.7231\n","Epoch 68/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3829.0420 - mae: 3829.0420\n","Epoch 69/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3645.5173 - mae: 3645.5173\n","Epoch 70/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3842.1963 - mae: 3842.1963\n","Epoch 71/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3637.4282 - mae: 3637.4282\n","Epoch 72/100\n","34/34 [==============================] - 0s 11ms/step - loss: 3809.1746 - mae: 3809.1746\n","Epoch 73/100\n","34/34 [==============================] - 0s 10ms/step - loss: 3732.2039 - mae: 3732.2039\n","Epoch 74/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3641.5852 - mae: 3641.5852\n","Epoch 75/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3617.6650 - mae: 3617.6650\n","Epoch 76/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3636.4246 - mae: 3636.4246\n","Epoch 77/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3697.5798 - mae: 3697.5798\n","Epoch 78/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3717.2058 - mae: 3717.2058\n","Epoch 79/100\n","34/34 [==============================] - 0s 6ms/step - loss: 4067.0515 - mae: 4067.0515\n","Epoch 80/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3689.9980 - mae: 3689.9980\n","Epoch 81/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3748.2434 - mae: 3748.2434\n","Epoch 82/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3853.7512 - mae: 3853.7512\n","Epoch 83/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3692.0300 - mae: 3692.0300\n","Epoch 84/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3598.5688 - mae: 3598.5688\n","Epoch 85/100\n","34/34 [==============================] - 0s 9ms/step - loss: 3675.4976 - mae: 3675.4976\n","Epoch 86/100\n","34/34 [==============================] - 0s 4ms/step - loss: 3659.0784 - mae: 3659.0784\n","Epoch 87/100\n","34/34 [==============================] - 0s 6ms/step - loss: 4047.3496 - mae: 4047.3496\n","Epoch 88/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3624.7505 - mae: 3624.7505\n","Epoch 89/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3654.6199 - mae: 3654.6199\n","Epoch 90/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3701.5239 - mae: 3701.5239\n","Epoch 91/100\n","34/34 [==============================] - 0s 6ms/step - loss: 3612.1675 - mae: 3612.1675\n","Epoch 92/100\n","34/34 [==============================] - 0s 5ms/step - loss: 3759.7100 - mae: 3759.7100\n","Epoch 93/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3940.4729 - mae: 3940.4729\n","Epoch 94/100\n","34/34 [==============================] - 0s 8ms/step - loss: 4002.4561 - mae: 4002.4561\n","Epoch 95/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3783.5488 - mae: 3783.5488\n","Epoch 96/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3695.1887 - mae: 3695.1887\n","Epoch 97/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3777.7603 - mae: 3777.7603\n","Epoch 98/100\n","34/34 [==============================] - 0s 8ms/step - loss: 3584.2041 - mae: 3584.2041\n","Epoch 99/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3940.5686 - mae: 3940.5686\n","Epoch 100/100\n","34/34 [==============================] - 0s 7ms/step - loss: 3651.4126 - mae: 3651.4126\n"]}]},{"cell_type":"code","source":["model_3.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpjXC326yOyG","executionInfo":{"status":"ok","timestamp":1685419047458,"user_tz":-540,"elapsed":470,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"43644940-b221-42e6-97b6-767aac822831"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 3637.0479 - mae: 3637.0479\n"]},{"output_type":"execute_result","data":{"text/plain":["[3637.0478515625, 3637.0478515625]"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["pd.DataFrame(history_3.history).plot()\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Epochs\");"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"9jzVX2bMzUrV","executionInfo":{"status":"ok","timestamp":1685419053938,"user_tz":-540,"elapsed":428,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"42e9b6c6-51c4-448a-d5d8-26e2c9082d68"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model_4= tf.keras.Sequential([\n","    tf.keras.layers.Dense(300),\n","    tf.keras.layers.Dense(200),\n","    tf.keras.layers.Dense(100),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model_4.compile(loss= tf.keras.losses.mae,\n","                optimizer= tf.keras.optimizers.Adam(learning_rate= 0.001),\n","                metrics= [\"mae\"])\n","\n","history_4= model_4.fit(X_train, y_train, epochs= 300) ## more epochs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fGTHxKsQzrHO","executionInfo":{"status":"ok","timestamp":1685419280397,"user_tz":-540,"elapsed":82976,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"b77a3c5e-d4fa-4163-885a-061ccf49853d"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/300\n","34/34 [==============================] - 1s 4ms/step - loss: 11432.3066 - mae: 11432.3066\n","Epoch 2/300\n","34/34 [==============================] - 0s 4ms/step - loss: 7462.5894 - mae: 7462.5894\n","Epoch 3/300\n","34/34 [==============================] - 0s 4ms/step - loss: 7180.2256 - mae: 7180.2256\n","Epoch 4/300\n","34/34 [==============================] - 0s 4ms/step - loss: 6953.5820 - mae: 6953.5820\n","Epoch 5/300\n","34/34 [==============================] - 0s 4ms/step - loss: 6754.5044 - mae: 6754.5044\n","Epoch 6/300\n","34/34 [==============================] - 0s 4ms/step - loss: 6633.6870 - mae: 6633.6870\n","Epoch 7/300\n","34/34 [==============================] - 0s 4ms/step - loss: 6612.7515 - mae: 6612.7515\n","Epoch 8/300\n","34/34 [==============================] - 0s 5ms/step - loss: 6495.3472 - mae: 6495.3472\n","Epoch 9/300\n","34/34 [==============================] - 0s 5ms/step - loss: 6438.3237 - mae: 6438.3237\n","Epoch 10/300\n","34/34 [==============================] - 0s 5ms/step - loss: 6347.9766 - mae: 6347.9766\n","Epoch 11/300\n","34/34 [==============================] - 0s 7ms/step - loss: 6355.3003 - mae: 6355.3003\n","Epoch 12/300\n","34/34 [==============================] - 0s 8ms/step - loss: 6214.8491 - mae: 6214.8491\n","Epoch 13/300\n","34/34 [==============================] - 0s 7ms/step - loss: 6049.5986 - mae: 6049.5986\n","Epoch 14/300\n","34/34 [==============================] - 0s 9ms/step - loss: 5850.6411 - mae: 5850.6411\n","Epoch 15/300\n","34/34 [==============================] - 0s 7ms/step - loss: 5604.4595 - mae: 5604.4595\n","Epoch 16/300\n","34/34 [==============================] - 0s 8ms/step - loss: 5137.9346 - mae: 5137.9346\n","Epoch 17/300\n","34/34 [==============================] - 0s 8ms/step - loss: 4521.1006 - mae: 4521.1006\n","Epoch 18/300\n","34/34 [==============================] - 0s 9ms/step - loss: 3976.4653 - mae: 3976.4653\n","Epoch 19/300\n","34/34 [==============================] - 0s 12ms/step - loss: 3839.6382 - mae: 3839.6382\n","Epoch 20/300\n","34/34 [==============================] - 0s 11ms/step - loss: 3863.8018 - mae: 3863.8018\n","Epoch 21/300\n","34/34 [==============================] - 0s 11ms/step - loss: 3853.1914 - mae: 3853.1914\n","Epoch 22/300\n","34/34 [==============================] - 0s 9ms/step - loss: 3868.2114 - mae: 3868.2114\n","Epoch 23/300\n","34/34 [==============================] - 0s 10ms/step - loss: 3821.8042 - mae: 3821.8042\n","Epoch 24/300\n","34/34 [==============================] - 0s 9ms/step - loss: 3842.9556 - mae: 3842.9556\n","Epoch 25/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3820.8472 - mae: 3820.8472\n","Epoch 26/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3758.2637 - mae: 3758.2637\n","Epoch 27/300\n","34/34 [==============================] - 0s 10ms/step - loss: 3797.2361 - mae: 3797.2361\n","Epoch 28/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3731.6484 - mae: 3731.6484\n","Epoch 29/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3809.7759 - mae: 3809.7759\n","Epoch 30/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3746.1411 - mae: 3746.1411\n","Epoch 31/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3719.3462 - mae: 3719.3462\n","Epoch 32/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3680.2559 - mae: 3680.2559\n","Epoch 33/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3678.8921 - mae: 3678.8921\n","Epoch 34/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3696.9875 - mae: 3696.9875\n","Epoch 35/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3653.2898 - mae: 3653.2898\n","Epoch 36/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3657.3521 - mae: 3657.3521\n","Epoch 37/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3627.3491 - mae: 3627.3491\n","Epoch 38/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3616.0159 - mae: 3616.0159\n","Epoch 39/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3653.7556 - mae: 3653.7556\n","Epoch 40/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3666.4333 - mae: 3666.4333\n","Epoch 41/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3711.2764 - mae: 3711.2764\n","Epoch 42/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3614.1897 - mae: 3614.1897\n","Epoch 43/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3588.0608 - mae: 3588.0608\n","Epoch 44/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3605.1196 - mae: 3605.1196\n","Epoch 45/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3651.4265 - mae: 3651.4265\n","Epoch 46/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3580.0884 - mae: 3580.0884\n","Epoch 47/300\n","34/34 [==============================] - 0s 9ms/step - loss: 3583.0588 - mae: 3583.0588\n","Epoch 48/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3545.8525 - mae: 3545.8525\n","Epoch 49/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3636.3293 - mae: 3636.3293\n","Epoch 50/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3555.9792 - mae: 3555.9792\n","Epoch 51/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3525.0691 - mae: 3525.0691\n","Epoch 52/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3505.7083 - mae: 3505.7083\n","Epoch 53/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3522.9792 - mae: 3522.9792\n","Epoch 54/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3560.8625 - mae: 3560.8625\n","Epoch 55/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3581.9028 - mae: 3581.9028\n","Epoch 56/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3520.5625 - mae: 3520.5625\n","Epoch 57/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3533.0745 - mae: 3533.0745\n","Epoch 58/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3660.6187 - mae: 3660.6187\n","Epoch 59/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3517.0688 - mae: 3517.0688\n","Epoch 60/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3528.3896 - mae: 3528.3896\n","Epoch 61/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3538.5088 - mae: 3538.5088\n","Epoch 62/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3584.2083 - mae: 3584.2083\n","Epoch 63/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3530.6494 - mae: 3530.6494\n","Epoch 64/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3515.5298 - mae: 3515.5298\n","Epoch 65/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3519.2976 - mae: 3519.2976\n","Epoch 66/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3630.3367 - mae: 3630.3367\n","Epoch 67/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3541.2051 - mae: 3541.2051\n","Epoch 68/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3555.5869 - mae: 3555.5869\n","Epoch 69/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3527.7708 - mae: 3527.7708\n","Epoch 70/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3520.8269 - mae: 3520.8269\n","Epoch 71/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3512.4617 - mae: 3512.4617\n","Epoch 72/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3612.4351 - mae: 3612.4351\n","Epoch 73/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3526.8037 - mae: 3526.8037\n","Epoch 74/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3513.2769 - mae: 3513.2769\n","Epoch 75/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3523.7021 - mae: 3523.7021\n","Epoch 76/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3549.5408 - mae: 3549.5408\n","Epoch 77/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3634.6643 - mae: 3634.6643\n","Epoch 78/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3567.3308 - mae: 3567.3308\n","Epoch 79/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3536.4282 - mae: 3536.4282\n","Epoch 80/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3515.8379 - mae: 3515.8379\n","Epoch 81/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3535.9414 - mae: 3535.9414\n","Epoch 82/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3621.5388 - mae: 3621.5388\n","Epoch 83/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3555.8103 - mae: 3555.8103\n","Epoch 84/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3510.0100 - mae: 3510.0100\n","Epoch 85/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3500.9836 - mae: 3500.9836\n","Epoch 86/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3496.4119 - mae: 3496.4119\n","Epoch 87/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3533.5439 - mae: 3533.5439\n","Epoch 88/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3615.1458 - mae: 3615.1458\n","Epoch 89/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3539.9236 - mae: 3539.9236\n","Epoch 90/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3517.9663 - mae: 3517.9663\n","Epoch 91/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3526.3994 - mae: 3526.3994\n","Epoch 92/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3552.3342 - mae: 3552.3342\n","Epoch 93/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3582.0547 - mae: 3582.0547\n","Epoch 94/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3620.0571 - mae: 3620.0571\n","Epoch 95/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3567.0298 - mae: 3567.0298\n","Epoch 96/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3523.7090 - mae: 3523.7090\n","Epoch 97/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3595.0137 - mae: 3595.0137\n","Epoch 98/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3524.7720 - mae: 3524.7720\n","Epoch 99/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3510.5498 - mae: 3510.5498\n","Epoch 100/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3519.9722 - mae: 3519.9722\n","Epoch 101/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3507.1338 - mae: 3507.1338\n","Epoch 102/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3503.9548 - mae: 3503.9548\n","Epoch 103/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3509.8621 - mae: 3509.8621\n","Epoch 104/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3513.0417 - mae: 3513.0417\n","Epoch 105/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3558.4363 - mae: 3558.4363\n","Epoch 106/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3526.9268 - mae: 3526.9268\n","Epoch 107/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3518.8831 - mae: 3518.8831\n","Epoch 108/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3557.1228 - mae: 3557.1228\n","Epoch 109/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3548.0381 - mae: 3548.0381\n","Epoch 110/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3534.6667 - mae: 3534.6667\n","Epoch 111/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3553.3242 - mae: 3553.3242\n","Epoch 112/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3535.9370 - mae: 3535.9370\n","Epoch 113/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3527.9648 - mae: 3527.9648\n","Epoch 114/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3520.5659 - mae: 3520.5659\n","Epoch 115/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3521.2043 - mae: 3521.2043\n","Epoch 116/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3568.8372 - mae: 3568.8372\n","Epoch 117/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3550.5278 - mae: 3550.5278\n","Epoch 118/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3500.7114 - mae: 3500.7114\n","Epoch 119/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3598.2637 - mae: 3598.2637\n","Epoch 120/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3537.2383 - mae: 3537.2383\n","Epoch 121/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3506.3550 - mae: 3506.3550\n","Epoch 122/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3544.3088 - mae: 3544.3088\n","Epoch 123/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3538.0747 - mae: 3538.0747\n","Epoch 124/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3518.1287 - mae: 3518.1287\n","Epoch 125/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3540.3616 - mae: 3540.3616\n","Epoch 126/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3528.3276 - mae: 3528.3276\n","Epoch 127/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3518.4536 - mae: 3518.4536\n","Epoch 128/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3532.6978 - mae: 3532.6978\n","Epoch 129/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3529.7034 - mae: 3529.7034\n","Epoch 130/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3562.0552 - mae: 3562.0552\n","Epoch 131/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3499.2161 - mae: 3499.2161\n","Epoch 132/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3519.7703 - mae: 3519.7703\n","Epoch 133/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3519.6296 - mae: 3519.6296\n","Epoch 134/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3516.7664 - mae: 3516.7664\n","Epoch 135/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3574.7979 - mae: 3574.7979\n","Epoch 136/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3525.8291 - mae: 3525.8291\n","Epoch 137/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3527.0588 - mae: 3527.0588\n","Epoch 138/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3592.4351 - mae: 3592.4351\n","Epoch 139/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3551.0242 - mae: 3551.0242\n","Epoch 140/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3511.2061 - mae: 3511.2061\n","Epoch 141/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3540.8284 - mae: 3540.8284\n","Epoch 142/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3504.3237 - mae: 3504.3237\n","Epoch 143/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3519.8430 - mae: 3519.8430\n","Epoch 144/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3509.8806 - mae: 3509.8806\n","Epoch 145/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3540.2952 - mae: 3540.2952\n","Epoch 146/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3575.8674 - mae: 3575.8674\n","Epoch 147/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3558.4541 - mae: 3558.4541\n","Epoch 148/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3518.7004 - mae: 3518.7004\n","Epoch 149/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3498.9199 - mae: 3498.9199\n","Epoch 150/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3500.3367 - mae: 3500.3367\n","Epoch 151/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3506.4858 - mae: 3506.4858\n","Epoch 152/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3540.5198 - mae: 3540.5198\n","Epoch 153/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3589.7041 - mae: 3589.7041\n","Epoch 154/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3572.1963 - mae: 3572.1963\n","Epoch 155/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3545.0735 - mae: 3545.0735\n","Epoch 156/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3510.5854 - mae: 3510.5854\n","Epoch 157/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3516.4863 - mae: 3516.4863\n","Epoch 158/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3525.3271 - mae: 3525.3271\n","Epoch 159/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3496.7312 - mae: 3496.7312\n","Epoch 160/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3664.9678 - mae: 3664.9678\n","Epoch 161/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3527.9106 - mae: 3527.9106\n","Epoch 162/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3523.9199 - mae: 3523.9199\n","Epoch 163/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3529.3484 - mae: 3529.3484\n","Epoch 164/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3507.2993 - mae: 3507.2993\n","Epoch 165/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3583.2361 - mae: 3583.2361\n","Epoch 166/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3539.1443 - mae: 3539.1443\n","Epoch 167/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3558.9272 - mae: 3558.9272\n","Epoch 168/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3593.3728 - mae: 3593.3728\n","Epoch 169/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3499.6562 - mae: 3499.6562\n","Epoch 170/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3508.7275 - mae: 3508.7275\n","Epoch 171/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3515.5842 - mae: 3515.5842\n","Epoch 172/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3499.9917 - mae: 3499.9917\n","Epoch 173/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3502.2830 - mae: 3502.2830\n","Epoch 174/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3499.9226 - mae: 3499.9226\n","Epoch 175/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.5400 - mae: 3522.5400\n","Epoch 176/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3503.5291 - mae: 3503.5291\n","Epoch 177/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3503.1550 - mae: 3503.1550\n","Epoch 178/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3499.4922 - mae: 3499.4922\n","Epoch 179/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3608.5474 - mae: 3608.5474\n","Epoch 180/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3544.1221 - mae: 3544.1221\n","Epoch 181/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3511.3562 - mae: 3511.3562\n","Epoch 182/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3545.6157 - mae: 3545.6157\n","Epoch 183/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3584.8181 - mae: 3584.8181\n","Epoch 184/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3657.5154 - mae: 3657.5154\n","Epoch 185/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3503.1270 - mae: 3503.1270\n","Epoch 186/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3552.5061 - mae: 3552.5061\n","Epoch 187/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3576.0566 - mae: 3576.0566\n","Epoch 188/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3523.7205 - mae: 3523.7205\n","Epoch 189/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3509.1584 - mae: 3509.1584\n","Epoch 190/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3497.9241 - mae: 3497.9241\n","Epoch 191/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3495.8923 - mae: 3495.8923\n","Epoch 192/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3502.1758 - mae: 3502.1758\n","Epoch 193/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3514.4949 - mae: 3514.4949\n","Epoch 194/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3542.7053 - mae: 3542.7053\n","Epoch 195/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3532.1028 - mae: 3532.1028\n","Epoch 196/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3659.3018 - mae: 3659.3018\n","Epoch 197/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3526.4055 - mae: 3526.4055\n","Epoch 198/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3509.7854 - mae: 3509.7854\n","Epoch 199/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3500.8909 - mae: 3500.8909\n","Epoch 200/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3509.3584 - mae: 3509.3584\n","Epoch 201/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3496.0510 - mae: 3496.0510\n","Epoch 202/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3495.1792 - mae: 3495.1792\n","Epoch 203/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3547.9937 - mae: 3547.9937\n","Epoch 204/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3540.1130 - mae: 3540.1130\n","Epoch 205/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3506.5227 - mae: 3506.5227\n","Epoch 206/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3513.6985 - mae: 3513.6985\n","Epoch 207/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3539.4587 - mae: 3539.4587\n","Epoch 208/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3524.5342 - mae: 3524.5342\n","Epoch 209/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3531.7178 - mae: 3531.7178\n","Epoch 210/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.6326 - mae: 3522.6326\n","Epoch 211/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3550.6978 - mae: 3550.6978\n","Epoch 212/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3499.5969 - mae: 3499.5969\n","Epoch 213/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3514.6873 - mae: 3514.6873\n","Epoch 214/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3526.5437 - mae: 3526.5437\n","Epoch 215/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3520.0830 - mae: 3520.0830\n","Epoch 216/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3503.7600 - mae: 3503.7600\n","Epoch 217/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3505.7415 - mae: 3505.7415\n","Epoch 218/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3503.5332 - mae: 3503.5332\n","Epoch 219/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3585.0000 - mae: 3585.0000\n","Epoch 220/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3492.8113 - mae: 3492.8113\n","Epoch 221/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3523.9968 - mae: 3523.9968\n","Epoch 222/300\n","34/34 [==============================] - 0s 8ms/step - loss: 3553.3684 - mae: 3553.3684\n","Epoch 223/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3521.7678 - mae: 3521.7678\n","Epoch 224/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3554.2517 - mae: 3554.2517\n","Epoch 225/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3531.1382 - mae: 3531.1382\n","Epoch 226/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3500.4255 - mae: 3500.4255\n","Epoch 227/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3522.9922 - mae: 3522.9922\n","Epoch 228/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3495.5740 - mae: 3495.5740\n","Epoch 229/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3535.9553 - mae: 3535.9553\n","Epoch 230/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3559.1519 - mae: 3559.1519\n","Epoch 231/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3524.0398 - mae: 3524.0398\n","Epoch 232/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3501.5386 - mae: 3501.5386\n","Epoch 233/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3490.5408 - mae: 3490.5408\n","Epoch 234/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3505.8210 - mae: 3505.8210\n","Epoch 235/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3497.4001 - mae: 3497.4001\n","Epoch 236/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3517.8230 - mae: 3517.8230\n","Epoch 237/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3526.4827 - mae: 3526.4827\n","Epoch 238/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3500.9792 - mae: 3500.9792\n","Epoch 239/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3519.1294 - mae: 3519.1294\n","Epoch 240/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3606.8979 - mae: 3606.8979\n","Epoch 241/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3559.3997 - mae: 3559.3997\n","Epoch 242/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3542.5073 - mae: 3542.5073\n","Epoch 243/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3580.9714 - mae: 3580.9714\n","Epoch 244/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3530.0747 - mae: 3530.0747\n","Epoch 245/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3533.6838 - mae: 3533.6838\n","Epoch 246/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3529.9834 - mae: 3529.9834\n","Epoch 247/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3535.5693 - mae: 3535.5693\n","Epoch 248/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.6721 - mae: 3522.6721\n","Epoch 249/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.6956 - mae: 3522.6956\n","Epoch 250/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3522.2771 - mae: 3522.2771\n","Epoch 251/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3520.9448 - mae: 3520.9448\n","Epoch 252/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3538.3845 - mae: 3538.3845\n","Epoch 253/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3535.9780 - mae: 3535.9780\n","Epoch 254/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3541.8748 - mae: 3541.8748\n","Epoch 255/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3516.2473 - mae: 3516.2473\n","Epoch 256/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3513.2478 - mae: 3513.2478\n","Epoch 257/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3492.8513 - mae: 3492.8513\n","Epoch 258/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3505.7354 - mae: 3505.7354\n","Epoch 259/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3553.7202 - mae: 3553.7200\n","Epoch 260/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3512.7234 - mae: 3512.7234\n","Epoch 261/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3526.6914 - mae: 3526.6914\n","Epoch 262/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3555.5793 - mae: 3555.5793\n","Epoch 263/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3495.7351 - mae: 3495.7351\n","Epoch 264/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3541.1873 - mae: 3541.1873\n","Epoch 265/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3560.3230 - mae: 3560.3230\n","Epoch 266/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3499.9714 - mae: 3499.9714\n","Epoch 267/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3524.5493 - mae: 3524.5493\n","Epoch 268/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3524.8057 - mae: 3524.8057\n","Epoch 269/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3507.7666 - mae: 3507.7666\n","Epoch 270/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3525.9841 - mae: 3525.9841\n","Epoch 271/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3490.5427 - mae: 3490.5427\n","Epoch 272/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3526.1086 - mae: 3526.1086\n","Epoch 273/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3509.3635 - mae: 3509.3635\n","Epoch 274/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3547.2224 - mae: 3547.2224\n","Epoch 275/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3501.1516 - mae: 3501.1516\n","Epoch 276/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3504.4800 - mae: 3504.4800\n","Epoch 277/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3518.7087 - mae: 3518.7087\n","Epoch 278/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3505.2126 - mae: 3505.2126\n","Epoch 279/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3544.9949 - mae: 3544.9949\n","Epoch 280/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3523.9956 - mae: 3523.9956\n","Epoch 281/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3542.9668 - mae: 3542.9668\n","Epoch 282/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3582.9849 - mae: 3582.9849\n","Epoch 283/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3540.9792 - mae: 3540.9792\n","Epoch 284/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3505.4758 - mae: 3505.4758\n","Epoch 285/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3563.9619 - mae: 3563.9619\n","Epoch 286/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3548.9104 - mae: 3548.9104\n","Epoch 287/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3522.7166 - mae: 3522.7166\n","Epoch 288/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3545.9373 - mae: 3545.9373\n","Epoch 289/300\n","34/34 [==============================] - 0s 5ms/step - loss: 3496.3879 - mae: 3496.3879\n","Epoch 290/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3598.4219 - mae: 3598.4219\n","Epoch 291/300\n","34/34 [==============================] - 0s 4ms/step - loss: 3526.0020 - mae: 3526.0020\n","Epoch 292/300\n","34/34 [==============================] - 0s 6ms/step - loss: 3610.6541 - mae: 3610.6541\n","Epoch 293/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3490.7854 - mae: 3490.7854\n","Epoch 294/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3541.6565 - mae: 3541.6565\n","Epoch 295/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3516.4146 - mae: 3516.4146\n","Epoch 296/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3601.5559 - mae: 3601.5559\n","Epoch 297/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3520.2615 - mae: 3520.2615\n","Epoch 298/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3496.0984 - mae: 3496.0984\n","Epoch 299/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3575.8586 - mae: 3575.8586\n","Epoch 300/300\n","34/34 [==============================] - 0s 7ms/step - loss: 3551.9248 - mae: 3551.9248\n"]}]},{"cell_type":"code","source":["model_4.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mxgvy0_O0is1","executionInfo":{"status":"ok","timestamp":1685419348552,"user_tz":-540,"elapsed":348,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"63f9a47d-fb64-43b7-9269-ac81471ec1ea"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 4ms/step - loss: 3214.3228 - mae: 3214.3228\n"]},{"output_type":"execute_result","data":{"text/plain":["[3214.32275390625, 3214.32275390625]"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["pd.DataFrame(history_4.history).plot()\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Epochs\");"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"YyHdyEIY0PfG","executionInfo":{"status":"ok","timestamp":1685419300273,"user_tz":-540,"elapsed":840,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"93c6613f-ff44-4071-a81a-6ee7fa9ca86a"},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["(X_train, y_train), (X_test, y_test) =tf.keras.datasets.boston_housing.load_data(path= \"boston_housing.npz\", \n","                                                                                 test_split= 0.2, seed= 42)"],"metadata":{"id":"1Law8JDf1rWN","executionInfo":{"status":"ok","timestamp":1685419731687,"user_tz":-540,"elapsed":284,"user":{"displayName":"hj n","userId":"00096717797687667922"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["X_train.shape, y_train.shape, X_test.shape, y_test.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z3LcQ6ga2AP1","executionInfo":{"status":"ok","timestamp":1685419744758,"user_tz":-540,"elapsed":2,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"6f406e75-6ff3-4c53-f17a-98cf826f2296"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((404, 13), (404,), (102, 13), (102,))"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","\n","model_5= tf.keras.Sequential([\n","    tf.keras.layers.Dense(300),\n","    tf.keras.layers.Dense(200),\n","    tf.keras.layers.Dense(100),\n","    tf.keras.layers.Dense(1)\n","])\n","\n","model_5.compile(loss= tf.keras.losses.mae,\n","                optimizer= tf.keras.optimizers.Adam(),\n","                metrics= [\"mae\"])\n","\n","history_5= model_5.fit(X_train, y_train, epochs= 100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTFqpENd2qK7","executionInfo":{"status":"ok","timestamp":1685420029113,"user_tz":-540,"elapsed":10675,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"288e1104-2fce-4c1b-9298-bb2692f164b5"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","13/13 [==============================] - 1s 5ms/step - loss: 86.6216 - mae: 86.6216\n","Epoch 2/100\n","13/13 [==============================] - 0s 4ms/step - loss: 19.5862 - mae: 19.5862\n","Epoch 3/100\n","13/13 [==============================] - 0s 4ms/step - loss: 12.8416 - mae: 12.8416\n","Epoch 4/100\n","13/13 [==============================] - 0s 4ms/step - loss: 11.1442 - mae: 11.1442\n","Epoch 5/100\n","13/13 [==============================] - 0s 4ms/step - loss: 10.5372 - mae: 10.5372\n","Epoch 6/100\n","13/13 [==============================] - 0s 4ms/step - loss: 6.8287 - mae: 6.8287\n","Epoch 7/100\n","13/13 [==============================] - 0s 4ms/step - loss: 11.2188 - mae: 11.2188\n","Epoch 8/100\n","13/13 [==============================] - 0s 5ms/step - loss: 12.2289 - mae: 12.2289\n","Epoch 9/100\n","13/13 [==============================] - 0s 5ms/step - loss: 7.3616 - mae: 7.3616\n","Epoch 10/100\n","13/13 [==============================] - 0s 5ms/step - loss: 7.0592 - mae: 7.0592\n","Epoch 11/100\n","13/13 [==============================] - 0s 6ms/step - loss: 5.9543 - mae: 5.9543\n","Epoch 12/100\n","13/13 [==============================] - 0s 5ms/step - loss: 6.0925 - mae: 6.0925\n","Epoch 13/100\n","13/13 [==============================] - 0s 6ms/step - loss: 6.0476 - mae: 6.0476\n","Epoch 14/100\n","13/13 [==============================] - 0s 7ms/step - loss: 7.1733 - mae: 7.1733\n","Epoch 15/100\n","13/13 [==============================] - 0s 7ms/step - loss: 7.2494 - mae: 7.2494\n","Epoch 16/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.9577 - mae: 6.9577\n","Epoch 17/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.2457 - mae: 6.2457\n","Epoch 18/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.6063 - mae: 6.6063\n","Epoch 19/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.5207 - mae: 6.5207\n","Epoch 20/100\n","13/13 [==============================] - 0s 9ms/step - loss: 6.1765 - mae: 6.1765\n","Epoch 21/100\n","13/13 [==============================] - 0s 9ms/step - loss: 6.1645 - mae: 6.1645\n","Epoch 22/100\n","13/13 [==============================] - 0s 11ms/step - loss: 5.9484 - mae: 5.9484\n","Epoch 23/100\n","13/13 [==============================] - 0s 10ms/step - loss: 8.7238 - mae: 8.7238\n","Epoch 24/100\n","13/13 [==============================] - 0s 9ms/step - loss: 6.5140 - mae: 6.5140\n","Epoch 25/100\n","13/13 [==============================] - 0s 10ms/step - loss: 6.5505 - mae: 6.5505\n","Epoch 26/100\n","13/13 [==============================] - 0s 10ms/step - loss: 6.9265 - mae: 6.9265\n","Epoch 27/100\n","13/13 [==============================] - 0s 11ms/step - loss: 7.3816 - mae: 7.3816\n","Epoch 28/100\n","13/13 [==============================] - 0s 10ms/step - loss: 6.4482 - mae: 6.4482\n","Epoch 29/100\n","13/13 [==============================] - 0s 11ms/step - loss: 6.2572 - mae: 6.2572\n","Epoch 30/100\n","13/13 [==============================] - 0s 8ms/step - loss: 5.6196 - mae: 5.6196\n","Epoch 31/100\n","13/13 [==============================] - 0s 9ms/step - loss: 6.2155 - mae: 6.2155\n","Epoch 32/100\n","13/13 [==============================] - 0s 9ms/step - loss: 5.7096 - mae: 5.7096\n","Epoch 33/100\n","13/13 [==============================] - 0s 12ms/step - loss: 5.2599 - mae: 5.2599\n","Epoch 34/100\n","13/13 [==============================] - 0s 12ms/step - loss: 5.3886 - mae: 5.3886\n","Epoch 35/100\n","13/13 [==============================] - 0s 11ms/step - loss: 5.4579 - mae: 5.4579\n","Epoch 36/100\n","13/13 [==============================] - 0s 11ms/step - loss: 5.1937 - mae: 5.1937\n","Epoch 37/100\n","13/13 [==============================] - 0s 10ms/step - loss: 5.3063 - mae: 5.3063\n","Epoch 38/100\n","13/13 [==============================] - 0s 8ms/step - loss: 5.6551 - mae: 5.6551\n","Epoch 39/100\n","13/13 [==============================] - 0s 6ms/step - loss: 5.4364 - mae: 5.4364\n","Epoch 40/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.4946 - mae: 6.4946\n","Epoch 41/100\n","13/13 [==============================] - 0s 7ms/step - loss: 8.0120 - mae: 8.0120\n","Epoch 42/100\n","13/13 [==============================] - 0s 8ms/step - loss: 7.7724 - mae: 7.7724\n","Epoch 43/100\n","13/13 [==============================] - 0s 6ms/step - loss: 6.6183 - mae: 6.6183\n","Epoch 44/100\n","13/13 [==============================] - 0s 6ms/step - loss: 6.5741 - mae: 6.5741\n","Epoch 45/100\n","13/13 [==============================] - 0s 5ms/step - loss: 6.1560 - mae: 6.1560\n","Epoch 46/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.8013 - mae: 5.8013\n","Epoch 47/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.5419 - mae: 5.5419\n","Epoch 48/100\n","13/13 [==============================] - 0s 4ms/step - loss: 7.1154 - mae: 7.1154\n","Epoch 49/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.6599 - mae: 5.6599\n","Epoch 50/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.7774 - mae: 5.7774\n","Epoch 51/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.1273 - mae: 5.1273\n","Epoch 52/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.9342 - mae: 5.9342\n","Epoch 53/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.5882 - mae: 5.5882\n","Epoch 54/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.3918 - mae: 5.3918\n","Epoch 55/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.2361 - mae: 5.2361\n","Epoch 56/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.3642 - mae: 5.3642\n","Epoch 57/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.4345 - mae: 5.4345\n","Epoch 58/100\n","13/13 [==============================] - 0s 6ms/step - loss: 5.0992 - mae: 5.0992\n","Epoch 59/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.1267 - mae: 5.1267\n","Epoch 60/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.2830 - mae: 5.2830\n","Epoch 61/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.3894 - mae: 5.3894\n","Epoch 62/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.4172 - mae: 5.4172\n","Epoch 63/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.4557 - mae: 5.4557\n","Epoch 64/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.2315 - mae: 5.2315\n","Epoch 65/100\n","13/13 [==============================] - 0s 4ms/step - loss: 4.9915 - mae: 4.9915\n","Epoch 66/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.3790 - mae: 5.3790\n","Epoch 67/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.3088 - mae: 5.3088\n","Epoch 68/100\n","13/13 [==============================] - 0s 4ms/step - loss: 4.8746 - mae: 4.8746\n","Epoch 69/100\n","13/13 [==============================] - 0s 5ms/step - loss: 4.8996 - mae: 4.8996\n","Epoch 70/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.0663 - mae: 5.0663\n","Epoch 71/100\n","13/13 [==============================] - 0s 4ms/step - loss: 4.7739 - mae: 4.7739\n","Epoch 72/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.0119 - mae: 5.0119\n","Epoch 73/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.1209 - mae: 5.1209\n","Epoch 74/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.2388 - mae: 5.2388\n","Epoch 75/100\n","13/13 [==============================] - 0s 4ms/step - loss: 4.9480 - mae: 4.9480\n","Epoch 76/100\n","13/13 [==============================] - 0s 5ms/step - loss: 4.7347 - mae: 4.7347\n","Epoch 77/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.5796 - mae: 5.5796\n","Epoch 78/100\n","13/13 [==============================] - 0s 5ms/step - loss: 5.8864 - mae: 5.8864\n","Epoch 79/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.0046 - mae: 5.0046\n","Epoch 80/100\n","13/13 [==============================] - 0s 4ms/step - loss: 4.9926 - mae: 4.9926\n","Epoch 81/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.1812 - mae: 5.1812\n","Epoch 82/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.2403 - mae: 5.2403\n","Epoch 83/100\n","13/13 [==============================] - 0s 5ms/step - loss: 4.8301 - mae: 4.8301\n","Epoch 84/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.0922 - mae: 5.0922\n","Epoch 85/100\n","13/13 [==============================] - 0s 4ms/step - loss: 5.0047 - mae: 5.0047\n","Epoch 86/100\n","13/13 [==============================] - 0s 5ms/step - loss: 4.7242 - mae: 4.7242\n","Epoch 87/100\n","13/13 [==============================] - 0s 6ms/step - loss: 4.7302 - mae: 4.7302\n","Epoch 88/100\n","13/13 [==============================] - 0s 8ms/step - loss: 4.6467 - mae: 4.6467\n","Epoch 89/100\n","13/13 [==============================] - 0s 7ms/step - loss: 5.1188 - mae: 5.1188\n","Epoch 90/100\n","13/13 [==============================] - 0s 8ms/step - loss: 5.4141 - mae: 5.4141\n","Epoch 91/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.2193 - mae: 6.2193\n","Epoch 92/100\n","13/13 [==============================] - 0s 7ms/step - loss: 4.9579 - mae: 4.9579\n","Epoch 93/100\n","13/13 [==============================] - 0s 7ms/step - loss: 4.5747 - mae: 4.5747\n","Epoch 94/100\n","13/13 [==============================] - 0s 7ms/step - loss: 5.6461 - mae: 5.6461\n","Epoch 95/100\n","13/13 [==============================] - 0s 7ms/step - loss: 5.2337 - mae: 5.2337\n","Epoch 96/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.4771 - mae: 6.4771\n","Epoch 97/100\n","13/13 [==============================] - 0s 7ms/step - loss: 6.1953 - mae: 6.1953\n","Epoch 98/100\n","13/13 [==============================] - 0s 9ms/step - loss: 5.2762 - mae: 5.2762\n","Epoch 99/100\n","13/13 [==============================] - 0s 8ms/step - loss: 4.6324 - mae: 4.6324\n","Epoch 100/100\n","13/13 [==============================] - 0s 8ms/step - loss: 4.6359 - mae: 4.6359\n"]}]},{"cell_type":"code","source":["model_5.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pe34x5mK3dJs","executionInfo":{"status":"ok","timestamp":1685420123957,"user_tz":-540,"elapsed":302,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"a89ef009-288f-4b13-9212-6797840676f0"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 4ms/step - loss: 4.2583 - mae: 4.2583\n"]},{"output_type":"execute_result","data":{"text/plain":["[4.258289813995361, 4.258289813995361]"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["pd.DataFrame(history_5.history).plot()\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Epochs\");"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"kALs_30l3jHI","executionInfo":{"status":"ok","timestamp":1685420156480,"user_tz":-540,"elapsed":1058,"user":{"displayName":"hj n","userId":"00096717797687667922"}},"outputId":"b5733002-a079-431c-a8dd-30371bddddbc"},"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"AyiHG2nubmu7"},"source":["## ðŸ“– Extra curriculum\n","\n","If you're looking for extra materials relating to this notebook, I'd check out the following:\n","\n","* [MIT introduction deep learning lecture 1](https://youtu.be/njKP3FqW3Sk) - gives a great overview of what's happening behind all of the code we're running.\n","* Reading: 1-hour of [Chapter 1 of Neural Networks and Deep Learning](http://neuralnetworksanddeeplearning.com/chap1.html) by Michael Nielson - a great in-depth and hands-on example of the intuition behind neural networks.\n","\n","To practice your regression modelling with TensorFlow, I'd also encourage you to look through [Lion Bridge's collection of datasets](https://lionbridge.ai/datasets/) or [Kaggle's datasets](https://www.kaggle.com/data), find a regression dataset which sparks your interest and try to model."]}]}